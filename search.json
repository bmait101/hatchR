[{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hatchR development","title":"Contributing to hatchR development","text":"outlines propose change hatchR. two main approaches: Create GitHub issue identifying bug suggesting feature. Contribute code change via GitHub pull request. prefer use GitHub, please send email bryan.maitland@usda.gov.","code":""},{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":"github-issue","dir":"","previous_headings":"","what":"GitHub Issue","title":"Contributing to hatchR development","text":"may create GitHub issue identifying bug suggesting feature. may access hatchR’s GitHub issues webpage visiting https://github.com/bmait101/hatchR/issues. Please illustrate bug feature using minimal reproducible example, reprex, linked . See tidyverse guide create great issue linked advice.","code":""},{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":"github-pull-request","dir":"","previous_headings":"","what":"GitHub Pull Request","title":"Contributing to hatchR development","text":"contribute change hatchR, please use pull request. learn creating GitHub pull request, please see GitHub guide linked .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Advanced plotting","text":"goal vignette provide examples might access results predict_phenology() might plot data.","code":"library(hatchR) library(purrr) library(tidyr) library(dplyr) library(ggplot2) library(lubridate) library(stringr) library(ggridges) library(patchwork)"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A simple example","title":"Advanced plotting","text":"’ll return first example Woody Island show might present data single spawning season. First let’s get results output plotting format. Now ’ll make plot temperature rectangles show duration hatch emergence periods.  can add labels days hatch emergence change labels legend.","code":"# run map to get a vector of models WI_mods <- map_df(   c(\"hatch\", \"emerge\"),   model_select,   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2   ) |>   select(expression)  # make vector of spawn dates WI_spawn_dates <- c(\"1990-08-14\", \"1990-08-18\", \"1990-09-3\")  # make variables grid WI_var_grid <- expand_grid(model = WI_mods$expression, spawn.date = WI_spawn_dates)     # run pmap for all variable combinations WI_results <- pmap(WI_var_grid,   predict_phenology,   data = woody_island, # additional arguments required by function   dates = date,   temperature = temp_c )  # Now that we have our model results, lets put them in a tibble for plotting WI_dev_period <- WI_results |>   map_df(\"dev_period\") |>   tibble() |>   mutate(     phenology = c(rep(\"hatch\", 3), rep(\"emerge\", 3)), # add a phenology column     days = as.numeric(stop - start), # column of the number of days (same as days2done)     index = c(1:3, 5:7)  # index for plotting later   ) # min and max for x-axis with 30 day buffer x_lims <- c(min(WI_dev_period$start), max(WI_dev_period$stop) + days(30)) y_lims <- c(-1, 16) # filter data for plot p_data <- woody_island |> filter(date >= x_lims[1], date <= x_lims[2])  plot1 <- p_data |>    ggplot() +   geom_rect(     data = WI_dev_period,      aes(       xmin = start, xmax = stop,       ymin = 10 - index,        ymax = 10.5 - index,       fill = phenology   )) +   geom_point(aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(aes(x = date, y = temp_c)) +   lims(x = x_lims, y = y_lims) +   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\")) +    theme_classic() +   theme(     legend.position = \"inside\",     legend.position.inside = c(0.75, 0.75)     ) plot1 plot1 +   geom_label(     data = WI_dev_period,     aes(       x = start + (stop - start) / 1.25,        y = (10.25 - index),        label = days     )   ) +   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) +    labs(fill = \"Phenology\", y = \"Temperature (C)\")"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"plotting-multiple-years","dir":"Articles","previous_headings":"","what":"Plotting multiple years","title":"Advanced plotting","text":"Let’s use Crooked River data number continuous years data without temperature anomalies. ’ll now make similar plot use facet_wrap() break plots apart year. cutting make developmental year phenology spans two calendar years. result, cut Aug. 1 one year Aug. 1 subsequent year (August 1 instead Sept. 1 match plot limits ’re setting ) make developmental year (year adult spawned). can facet_wrap() break years plot.  can see, allows us put figures X scale despite flowing multiple years. ’ll figure right way cut data (find similar alternative options). solves primary problem plotting phenology multiple years, results span multiple years may start stop intervals multiple years (particularly fall spawning species). Note run temperature data 2015, cutoff relative others. really wanted fix adding necessary dates temperature data crooked_river_sy tibble.","code":"# spawn dates spawn_dates <- map(   c(2011:2014), # year vector to map for custom function   function(year) { # custom paste function     c(       paste0(year, \"-09-01\"),       paste0(year, \"-09-20\"),       paste0(year, \"-09-30\")     )     }   ) |>    unlist()  # run map to get a vector of models dev_mods <- map_df(   c(\"hatch\", \"emerge\"),   model_select,   author = \"Austin et al. 2019\",   species = \"bull trout\",   model = \"MM\"   ) |>    select(expression)  # variable grid var_grid <- expand_grid(model = dev_mods$expression, spawn.date = spawn_dates)   ### multiple input mapping  crooked_predictions <- pmap(var_grid, # combos of variables to iterate over   predict_phenology, # function   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c )  # make duration dataframe CR_dev_period <- crooked_predictions |>   map_df(\"dev_period\") |>   tibble() |>   mutate(     phenology = c(rep(\"hatch\", 12), rep(\"emerge\", 12)), # add a phenology column     days = as.numeric(stop - start), # column of the number of days (same as days2done)     year = year(start), # new column for just year (to facet wrap with)     index = c(rep(1:3, 4), rep(5:7, 4))   ) |> # new index because we're making 4 independent graphs   na.omit() |>   filter(year >= 2011) # remove the 2010 year ### add a column called year (in this case the developmental year) cut_ints <- ymd(   c(     \"2010-08-01\", \"2011-08-01\", \"2012-08-01\",     \"2013-08-01\", \"2014-08-01\",     \"2015-08-01\", \"2016-08-01\"   ),   tz = \"UTC\" )  # cut to our cut intervals and label by developmental year crooked_river_sy <- crooked_river |>   mutate(year = cut(date,     breaks = cut_ints,     labels = c(2010:2015)   )) |>    # cut coerces our labels to factors, this changes them back to numbers   mutate(year = as.numeric(as.character(year))) |>   filter(year > 2010 & year < 2015) # remove 2010 and 2015  # make plot (facet_wrap by development year) ggplot() +   geom_rect(data = CR_dev_period, aes(     xmin = start,      xmax = stop,      ymin = 10 - index,      ymax = 10.5 - index,      fill = phenology   )) +   geom_point(data = crooked_river_sy, aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(data = crooked_river_sy, aes(x = date, y = temp_c)) +   # set limits   lims(x = c(min(CR_dev_period$start) - days(30), max(CR_dev_period$stop) + days(30))) +    scale_x_datetime(date_labels = \"%b\") +    # facet wrap here subset plots on developmental year   facet_wrap(~year, ncol = 1, scales = \"free_x\") +    scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) + # custom colors   labs(fill = \"Phenology\", x = \"Date\", y = \"Temperature (C)\") +   theme_classic()"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"plotting-multiple-individual-spawning-events","dir":"Articles","previous_headings":"","what":"Plotting multiple individual spawning events","title":"Advanced plotting","text":"Another common plotting scenario might data number fish spawn single multiple seasons want represent results. can show hypothetical scenario bull trout example . scenario, let’s assume 300 spawning adult pairs spawn roughly normal distribution mean Sept. 15 standard deviation 5 days (makes Sept. 1st 30th 3 sd mean).  Now can map hatch emergence timing across vector dates created two years. Notice chosen two fairly thermally different years quite different developmental phenology estimates (see plot Plotting multiple years). Also, ’re going take short cut mapping don’t store results date (1200 total, 600 developmental period estimated) memory. instead, pipe |> pmap() map_dbl(\"dev_period\") command left phenology estimates data otherwise outputted. plot, let’s briefly walk . First made predictions output start stop data map_df(\"dev_period\") command. Next added Phenology column appropriate phenology type determined structure spawn_grid object. made similar object spawning combined mapping ouput bull_trout_all_phenology. reason plot distributions spawning, hatching, emergence across years. can see also need cut like add developmental year use geom_blank() custom limits set everything scale.  can see, even small differences thermal regime can make big differences developmental phenology. even combine plot plot made previously show regime duration alongside distributions. combining plots highly recommend patchwork package.  many ways can plot data meant serve templates /guides around common issues related plotting phenology data.","code":"# draw from a normal distribution with above parameters set.seed(322) # allows us to draw same random sample every time for the example fish_dist <- round(rnorm(300,   mean = 15,   sd = 5 ), 0) # summary summary(fish_dist) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00   11.00   14.00   14.38   18.00   28.00  # change 0s to 1s fish_dist[which(fish_dist == 0)] <- 1  # look at distribution hist(fish_dist) # make a vector of fish dates and add mo_day to combine with fish_dist fish_dates <- tibble(date = seq(ymd(\"2014-09-01\"), ymd(\"2014-09-30\"), by = \"days\")) |>   mutate(mo_day = mday(date))  # loop for repping (could do with map, too) fish_dates_norm <- NULL for (d in fish_dates$mo_day) {   day <- fish_dates$date[d] # get date    spawners <- fish_dist[fish_dist == d] # vector of spawners in fish_dist    spawners_date <- rep(day, times = length(spawners)) # make vector of date repeated the length of the vector spawners    fish_dates_norm <- append(fish_dates_norm, spawners_date) # append to out file }  head(fish_dates_norm) #> [1] \"2014-09-01\" \"2014-09-02\" \"2014-09-03\" \"2014-09-03\" \"2014-09-03\" #> [6] \"2014-09-04\"  # now let's make the same vector for 2013 so we can compare two years fish_dates_13 <- fish_dates_norm |>   str_replace_all(\"2014\", \"2013\") # replace all the 2014s with 2013 using string replace  # add the two together in a vector and sort fish_dates_all <- sort(append(fish_dates_norm, fish_dates_13))  # looks good! head(fish_dates_all) #> [1] \"2013-09-01\" \"2013-09-02\" \"2013-09-03\" \"2013-09-03\" \"2013-09-03\" #> [6] \"2013-09-04\" tail(fish_dates_all) #> [1] \"2014-09-25\" \"2014-09-26\" \"2014-09-26\" \"2014-09-26\" \"2014-09-28\" #> [6] \"2014-09-28\"  # remember these all need to be in a character string for predict_phenology()! fish_dates_str <- format(fish_dates_all, \"%Y-%m-%d\") # make variable grid for pmap (we use dev_mods from previous example) spawn_grid <- expand_grid(model = dev_mods$expression, spawn.date = fish_dates_str)  bull_trout_dist <- pmap(spawn_grid,   predict_phenology,   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c ) |> # pipe!   map_df(\"dev_period\") # just output dev_period  ### now let's add the key columns for plotting  # first you can see the output and the spawn grid have the same number of rows so # we can borrow the format from the spawn grid length(bull_trout_dist) #> [1] 2 dim(spawn_grid) #> [1] 1200    2  # moreover from the grid, you can see that it predicts hatch for all the dates first # and then predicts emergence head(spawn_grid$model) #> [1] \"1/exp(5.086 - (x * 0.131))\" \"1/exp(5.086 - (x * 0.131))\" #> [3] \"1/exp(5.086 - (x * 0.131))\" \"1/exp(5.086 - (x * 0.131))\" #> [5] \"1/exp(5.086 - (x * 0.131))\" \"1/exp(5.086 - (x * 0.131))\" tail(spawn_grid$model) #> [1] \"1/exp(5.590 - (x  * 0.126))\" \"1/exp(5.590 - (x  * 0.126))\" #> [3] \"1/exp(5.590 - (x  * 0.126))\" \"1/exp(5.590 - (x  * 0.126))\" #> [5] \"1/exp(5.590 - (x  * 0.126))\" \"1/exp(5.590 - (x  * 0.126))\"  # now we can borrow all that information to make the exact data object we want bull_trout_dist_phenology <- bull_trout_dist |>   mutate(     Date = stop, # rename stop to Date     Phenology = c(rep(\"Hatch\", 600), rep(\"Emerge\", 600))   ) |> # make phenology column   select(Date:Phenology) # select date and phenology columns to put in object  # make a similar object with spawning data (notice we name the columns the exact same) bull_trout_spawn_phenology <- tibble(Date = fish_dates_all) |>   mutate(Phenology = \"Spawn\")  # combine spawn and hatch/emerge objects for a final plotting object bull_trout_all_phenology <- bind_rows(   bull_trout_spawn_phenology,   bull_trout_dist_phenology ) |>   mutate(y = year(Date)) |>   na.omit()  head(bull_trout_all_phenology) #> # A tibble: 6 × 3 #>   Date                Phenology     y #>   <dttm>              <chr>     <dbl> #> 1 2013-09-01 00:00:00 Spawn      2013 #> 2 2013-09-02 00:00:00 Spawn      2013 #> 3 2013-09-03 00:00:00 Spawn      2013 #> 4 2013-09-03 00:00:00 Spawn      2013 #> 5 2013-09-03 00:00:00 Spawn      2013 #> # ℹ 1 more row tail(bull_trout_all_phenology) #> # A tibble: 6 × 3 #>   Date                Phenology     y #>   <dttm>              <chr>     <dbl> #> 1 2015-04-11 00:00:00 Emerge     2015 #> 2 2015-04-13 00:00:00 Emerge     2015 #> 3 2015-04-13 00:00:00 Emerge     2015 #> 4 2015-04-13 00:00:00 Emerge     2015 #> 5 2015-04-17 00:00:00 Emerge     2015 #> # ℹ 1 more row # before we plot, because we are again plotting across years we need to cut up our data # still need 2012 and 2015 because phenology will leak over cut_ints_1314 <- ymd(c(   \"2012-08-01\", \"2013-08-01\",   \"2014-08-01\", \"2015-08-01\" ), tz = \"UTC\")  # cut according to our cut intervals and label by developmental year bull_trout_phenology_cut <- bull_trout_all_phenology |>   mutate(year = cut(Date,     breaks = cut_ints_1314,     labels = c(2012:2014)   )) |>   mutate(year = as.numeric(as.character(year))) |>   na.omit()    # look to see max development days to make custom lims bull_trout_dist |>   mutate(phen_days = stop - start) |>   slice_max(phen_days) # output max value #>        start       stop phen_days #> 1 2013-09-28 2014-04-30  214 days #> 2 2013-09-28 2014-04-30  214 days  # make custom lims using 30 days before first spawn and 244 days max (214 + 30) from above # makes a 30 day buffer cust_lims <- tibble(min = c(ymd(c(\"2013-08-01\", \"2014-08-01\"), tz = \"UTC\"))) |>   mutate(max = min + days(244)) |>   pivot_longer(everything(), names_to = \"type\", values_to = \"Date\") |>   mutate(year = c(2013, 2013, 2014, 2014))   # make plot ggplot() +   geom_blank(data = cust_lims, aes(x = Date)) + # we use geom_blank to keep everything on the same limits from our custom lims object   geom_density_ridges(     data = bull_trout_phenology_cut,     aes(x = Date, y = Phenology, color = Phenology, fill = Phenology),     jittered_points = TRUE,     position = position_points_jitter(width = 0.05, height = 0),     point_shape = \"|\", point_size = 2, point_alpha = 1, alpha = 0.7   ) +   lims(x = c(min(cust_lims$Date) - days(1), max(cust_lims$Date) + days(1))) +   scale_x_datetime(date_labels = \"%b\") +   scale_fill_brewer(palette = \"Dark2\") +   scale_color_brewer(palette = \"Dark2\") +   facet_wrap(~year, ncol = 1, scales = \"free_x\") +   theme_classic() +   theme(legend.position = \"none\") # same plot as before but we'll filter the years to 2013 and 2014  CR_dev_period_1314 <- CR_dev_period |> filter(year %in% c(2013, 2014)) crooked_river_sy_1314 <- crooked_river_sy |> filter(year %in% c(2013, 2014))  # name plot as object p1 p1 <- ggplot() +   geom_rect(data = CR_dev_period_1314, aes(     xmin = start, xmax = stop, # draw bars     ymin = 10 - index, ymax = 10.5 - index, # use index to vertically place rects     fill = phenology   )) +   geom_point(data = crooked_river_sy_1314, aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(data = crooked_river_sy_1314, aes(x = date, y = temp_c)) +   lims(x = c(min(CR_dev_period$start) - days(30), max(CR_dev_period$stop) + days(30))) + # set limits   scale_x_datetime(date_labels = \"%b\") + # change X label to month   facet_wrap(~year, ncol = 1, scales = \"free_x\") + # facet wrap here subset plots on developmental year   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) + # custom colors   labs(fill = \"Phenology\", x = \"Date\", y = \"Temperature (C)\") +   theme_classic()  # name distribution plot as object p2  p2 <- ggplot() +   geom_blank(data = cust_lims, aes(x = Date)) + # we use geom_blank to keep everything on the same limits from our custom lims object   geom_density_ridges(     data = bull_trout_phenology_cut,     aes(x = Date, y = Phenology, color = Phenology, fill = Phenology),     jittered_points = TRUE,     position = position_points_jitter(width = 0.05, height = 0),     point_shape = \"|\", point_size = 2, point_alpha = 1, alpha = 0.7   ) +   lims(x = c(min(cust_lims$Date) - days(1), max(cust_lims$Date) + days(1))) +   scale_x_datetime(date_labels = \"%b\") +   scale_fill_brewer(palette = \"Dark2\") +   scale_color_brewer(palette = \"Dark2\") +   facet_wrap(~year, ncol = 1, scales = \"free_x\") +   theme_classic() +   theme(legend.position = \"none\")  ### patchwork plot  # plot the two plots side by side using + operator, you can stack with / operator p1 + p2"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"hatchR R package allows users predict hatch emergence timing wild fishes, well additional tools aid analyses. hatchR intended bridge analytic gap taking statistical models developed hatchery settings (e.g., Beacham Murray 1990) applying real world temperature data sets using effective value framework developed Sparks et al. (2019). hatchR also available interactive web application https://elifelts.shinyapps.io/hatchR_demo/. hatchR designed flexible achieve many applications. However, virtue built scripting application, hatchR able tackle large datasets relatively quickly efficiently. , hatchR can used predict hatch emergence timing many fish species across many locations years. type upstream analyses covered additional vignettes package. introductory vignette, : describes input data requirements provide recommendations importing data review basic data checks preview full hatchR workflow covered vignettes generalized workflow hatchR, including steps subsequent vignettes, shown .","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Input Data Requirements","title":"Introduction","text":"hatchR requires three primary data inputs: Water temperature data Species-specific model parameters Spawning date date ranges","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"water-temperature-data","dir":"Articles","previous_headings":"Input Data Requirements","what":"Water Temperature Data","title":"Introduction","text":"Water temperature datasets wild fishes often either (1) already summarized day (.e., mean daily temperature) , (2) raw format something like HOBO TidbiT data logger readings taken multiple times per day, can summarized mean daily temperatures. Alternatively, daily water temperature predictions novel statistical models (e.g., Siegel et al. 2023) similarly implemented. Fundamentally, hatchR assumes input data two columns: date: vector dates (often times) temperature measurement (must class Date POSIXct, Tibbles print <date> <dttm>, respectively). temperature: vector associated temperature measurement (centigrade). Additional columns allowed, required. expect data look something like : hatchR assumes ’ve checked missing records errors data can work gaps, ’s important go data checks discussed , well validity checks. hatchR can use values freezing (e.g., 0 °C), returns extremely small effective values, time hatch emerge may > 1 year. cases, suggest users consider much data type reasonable data. learn , see section negative temperatures Predict fish phenology: Basic vignette.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"date-times","dir":"Articles","previous_headings":"Input Data Requirements > Water Temperature Data","what":"Dates and Times","title":"Introduction","text":"Numeric temperature values simple work R, dates time can tricky. provide brief overview work dates times R, refer user Chapter 17 R Data Science (Wickham, Çetinkaya-Rundel, Grolemund 2023) -depth discussion. lubridate package makes easier work dates times R. comes installed hatchR, can loaded : three types date/time data refer instant time: date, Tibbles print <date> time within day, Tibbles print <time> date-time date plus time, Tibbles print <dttm>. Base R calls POSIXct, ’s helpful name. can use lubridate::today() lubridate::now() get current date date-time: context hatchR, ways likely create date/time : reading file R readr::read_csv() string (e.g., data read R read.csv()) individual components (year, month, day, hour, minute, second)","code":"library(lubridate) today() #> [1] \"2025-06-25\" now() #> [1] \"2025-06-25 19:02:42 UTC\""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"reading-in-dates-from-a-file","dir":"Articles","previous_headings":"Input Data Requirements > Water Temperature Data","what":"Reading in dates from a file","title":"Introduction","text":"reading CSV file readr::read_csv(), readr (also comes installed hatchR) automatically parse (recognize) dates date-times form “YYYY-MM-DD” “YYYY-MM-DD HH:MM:SS”. ISO8601 date (<date>) date-time (<dttm>) formats, respectively. ISO8601 international standard writing dates components date organized biggest smallest separated -. , first load readr package read CSV file dates form “YYYY-MM-DD” “YYYY-MM-DD HH:MM:SS”: dates different format, ’ll need use col_types plus col_date() col_datetime() along standard date-time format (see Table 17.1 R Data Science (Wickham, Çetinkaya-Rundel, Grolemund 2023) list date format options).","code":"library(readr) csv <- \"   date,datetime   2022-01-02,2022-01-02 05:12 \" read_csv(csv) #> # A tibble: 1 × 2 #>   date       datetime            #>   <date>     <dttm>              #> 1 2022-01-02 2022-01-02 05:12:00"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"from-strings","dir":"Articles","previous_headings":"Input Data Requirements > Water Temperature Data","what":"From strings","title":"Introduction","text":"read CSV file using read.csv() base R, date columns formatted characters (<char>; e.g., \"2000-09-01\" \"2000-09-01 12:00:00\"). convert column <date> <dttm>. lubridate helper functions attempt automatically determine format specify order component. use , identify order year, month, day appear dates, arrange “y”, “m”, “d” order. gives name lubridate function parse date. date-time, add underscore one “h”, “m”, “s” name parsing function.","code":"ymd(\"2017-01-31\") #> [1] \"2017-01-31\" mdy(\"January 31st, 2017\") #> [1] \"2017-01-31\" mdy_hm(\"01/31/2017 08:01\") #> [1] \"2017-01-31 08:01:00 UTC\" ymd_hms(\"2017-01-31 20:11:59\") #> [1] \"2017-01-31 20:11:59 UTC\""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"from-individual-components","dir":"Articles","previous_headings":"Input Data Requirements > Water Temperature Data","what":"From individual components","title":"Introduction","text":"Sometimes components date separate columns. can use make_date() make_datetime() combine date date-time. show , ’ll use flights dataset comes nycflights13, installed alongside hatchR dependencies = TRUE install.packages(). also make use helper functions dplyr select() mutate() columns.","code":"library(nycflights13) library(dplyr) flights |>    select(year, month, day) |>   mutate(date = make_date(year, month, day)) #> # A tibble: 336,776 × 4 #>    year month   day date       #>   <int> <int> <int> <date>     #> 1  2013     1     1 2013-01-01 #> 2  2013     1     1 2013-01-01 #> 3  2013     1     1 2013-01-01 #> 4  2013     1     1 2013-01-01 #> 5  2013     1     1 2013-01-01 #> # ℹ 336,771 more rows  flights |>    select(year, month, day, hour, minute) |>    mutate(departure = make_datetime(year, month, day, hour, minute)) #> # A tibble: 336,776 × 6 #>    year month   day  hour minute departure           #>   <int> <int> <int> <dbl>  <dbl> <dttm>              #> 1  2013     1     1     5     15 2013-01-01 05:15:00 #> 2  2013     1     1     5     29 2013-01-01 05:29:00 #> 3  2013     1     1     5     40 2013-01-01 05:40:00 #> 4  2013     1     1     5     45 2013-01-01 05:45:00 #> 5  2013     1     1     6      0 2013-01-01 06:00:00 #> # ℹ 336,771 more rows"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"time-zones","dir":"Articles","previous_headings":"Input Data Requirements > Water Temperature Data","what":"Time Zones","title":"Introduction","text":"Time zones complex topic, don’t need delve deep purposes. cover basic topics. information, see Chapter 17 R Data Science (Wickham, Çetinkaya-Rundel, Grolemund 2023). R uses international standard IANA time zones. use consistent naming scheme {area}/{location}, typically form {continent}/{city} {ocean}/{city}. Examples include “America/New_York”, “Europe/Paris”, “Pacific/Auckland”. can find R thinks current time zone Sys.timezone(): (R doesn’t know, ’ll get NA.) R, time zone attribute date-time controls printing. example, three objects represent instant time: Unless otherwise specified, lubridate always uses UTC. UTC (Coordinated Universal Time) standard time zone used scientific community roughly equivalent GMT (Greenwich Mean Time). DST, makes convenient representation computation. Thus read_csv() converts UTC, times shifted, daily summaries can incorrect. matters data daily yet, .posixct() sets local time. can change time zone two ways: Change time zone attribute force_tz() Change time zone printing with_tz()","code":"Sys.timezone() #> [1] \"UTC\" x1 <- ymd_hms(\"2024-06-01 12:00:00\", tz = \"America/New_York\") x1 #> [1] \"2024-06-01 12:00:00 EDT\""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"using-readrread_csv","dir":"Articles","previous_headings":"Input Data Requirements > Importing water temperature data","what":"Using readr::read_csv()","title":"Introduction","text":"recommend loading data R using readr::read_csv(). can load readr using: vignettes, use two datasets come installed package: crooked_river woody_island. dataset available user R objects hatchR installed attached (see ?crooked_river ?woody_island information). raw example data (.csv files) stored extdata/ directory installed alongside hatchR. may store file paths example data: specifying path_* (using system.file()), load example dataset R: check crooked_river dataset running either str() tibble::glimpse() see structure data. glimpse() little like str() applied data frame, tries show much data possible. prefer tibble::glimpse() compact easier read. tibble also comes installed hatchR. Now can check structure crooked_river dataset: data, assuming .csv file data folder working directory called your_data.csv, call:","code":"library(readr) path_cr <- system.file(\"extdata/crooked_river.csv\", package = \"hatchR\") path_wi <- system.file(\"extdata/woody_island.csv\", package = \"hatchR\") crooked_river <- read_csv(path_cr) woody_island <- read_csv(path_wi) library(tibble) glimpse(crooked_river) #> Rows: 1,826 #> Columns: 2 #> $ date   <dttm> 2010-12-01, 2010-12-02, 2010-12-03, 2010-12-04, 2010-12-05, 20… #> $ temp_c <dbl> 1.1638020, 1.3442852, 1.2533443, 1.0068728, 1.2899153, 1.229158… glimpse(woody_island) #> Rows: 735 #> Columns: 2 #> $ date   <chr> \"8/11/1990\", \"8/12/1990\", \"8/13/1990\", \"8/14/1990\", \"8/15/1990\"… #> $ temp_c <dbl> 25.850000, 23.308333, 18.533333, 15.350000, 13.966667, 11.35833… library(readr) library(tibble) your_data <- read_csv(\"data/your_data.csv\") glimpse(your_data)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"using-read-csv","dir":"Articles","previous_headings":"Input Data Requirements > Importing water temperature data","what":"Using read.csv()","title":"Introduction","text":"import data functions like read.csv() read.table(), date columns formatted characters (<chr>). convert column <date> <dttm> type, recommend using lubridate, makes dealing date litter easier. example might . First, check structure crooked_river woody_island datasets: , convert date columns using lubridate:","code":"crooked_river <- read.csv(path_cr) woody_island <- read.csv(path_wi)  glimpse(crooked_river) # note date column imported as a character (<chr>) #> Rows: 1,826 #> Columns: 2 #> $ date   <chr> \"2010-12-01T00:00:00Z\", \"2010-12-02T00:00:00Z\", \"2010-12-03T00:… #> $ temp_c <dbl> 1.1638020, 1.3442852, 1.2533443, 1.0068728, 1.2899153, 1.229158… glimpse(woody_island) # note date column imported as a character (<chr>) #> Rows: 735 #> Columns: 2 #> $ date   <chr> \"8/11/1990\", \"8/12/1990\", \"8/13/1990\", \"8/14/1990\", \"8/15/1990\"… #> $ temp_c <dbl> 25.850000, 23.308333, 18.533333, 15.350000, 13.966667, 11.35833… # if your date is in the form \"2000-09-01 12:00:00\" crooked_river$date <- ymd_hms(crooked_river$date)  # if your date is in the form \"2000-09-01\" woody_island$date <- mdy(woody_island$date)   glimpse(crooked_river) #> Rows: 1,826 #> Columns: 2 #> $ date   <dttm> 2010-12-01, 2010-12-02, 2010-12-03, 2010-12-04, 2010-12-05, 20… #> $ temp_c <dbl> 1.1638020, 1.3442852, 1.2533443, 1.0068728, 1.2899153, 1.229158… glimpse(woody_island) #> Rows: 735 #> Columns: 2 #> $ date   <date> 1990-08-11, 1990-08-12, 1990-08-13, 1990-08-14, 1990-08-15, 19… #> $ temp_c <dbl> 25.850000, 23.308333, 18.533333, 15.350000, 13.966667, 11.35833…"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"data-checks","dir":"Articles","previous_headings":"Input Data Requirements","what":"Temperature data checks","title":"Introduction","text":"data loaded dates formatted correctly, can complete series checks ensure temperature data correct format missing values. hatchR provides several helper functions assist process.","code":"library(hatchR)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"viz-data","dir":"Articles","previous_headings":"Input Data Requirements","what":"Visualize your temperature data","title":"Introduction","text":"hatchR comes function plot_check_temp() visualize imported data verify nothing strange happened import process. function outputs ggplot2 object can subsequently modified user. arguments temp_min = temp_max = can used custom set thresholds expected temperature ranges (defaults set 0 25 °C). example using built-dataset crooked_river:","code":"plot_check_temp(data = crooked_river,                  dates = date,                  temperature = temp_c,                  temp_min = 0,                  temp_max = 12)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"summarize-data","dir":"Articles","previous_headings":"Input Data Requirements","what":"Summarize temperature data","title":"Introduction","text":"imported raw data multiple recordings per day, hatchR built function summarize data daily average mean called summarize_temp(). output function tibble mean daily temperature corresponding. , simulate dataset 30-minute temperature recordings year summarize data daily means. Now can summarize data daily means using summarize_temp(): recommend, minimum, visually checking data summarized.","code":"# set seed for reproducibility set.seed(123)  # create vector of date-times for a year at 30 minute intervals dates <- seq(   from = ymd_hms(\"2000-01-01 00:00:00\"),   to = ymd_hms(\"2000-12-31 23:59:59\"),    by = \"30 min\"   )  # simulate temperature data fake_data <- tibble(   date = dates,   temp = rnorm(n = length(dates), mean = 10, sd = 3) |> abs() )  # check it glimpse(fake_data) #> Rows: 17,568 #> Columns: 2 #> $ date <dttm> 2000-01-01 00:00:00, 2000-01-01 00:30:00, 2000-01-01 01:00:00, 2… #> $ temp <dbl> 8.318573, 9.309468, 14.676125, 10.211525, 10.387863, 15.145195, 1… fake_data_sum <- summarize_temp(data = fake_data,                                 temperature = temp,                                 dates = date)  nrow(fake_data) #17568 records #> [1] 17568 nrow(fake_data_sum) #366 records; 2000 was a leap year :) #> [1] 366 # note we use fake_data_sum instead of fake_data plot_check_temp(data = fake_data_sum,                  dates = date,                  temperature = daily_temp,                  temp_min = 5,                 temp_max = 15)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"check-continuous","dir":"Articles","previous_headings":"Input Data Requirements","what":"Check for continuous data","title":"Introduction","text":"present, hatchR uses continuous data. Therefore, data expected continuous complete. can check whether data complete continuous using check_continuous() function. function return message data continuous complete. , calls return clear: breaks data: ’ll get note providing row index breaks found inspection. days missing data, impute using rolling means approaches.","code":"check_continuous(data = crooked_river, dates = date) #> ℹ No breaks were found. All clear! check_continuous(data = woody_island, dates = date) #> ℹ No breaks were found. All clear! check_continuous(data = crooked_river[-5,], dates = date) #> Warning: ! Data not continuous #> ℹ Breaks found at rows: #> ℹ 5"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"species-params","dir":"Articles","previous_headings":"Input Data Requirements","what":"Species-specific model parameters","title":"Introduction","text":"hatchR two options selecting parameterized models predicting fish early life history phenology using: model parameterizations included package custom parameterizations using data processes described vignette Parameterize hatchR models","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"spawn-dates","dir":"Articles","previous_headings":"Input Data Requirements","what":"Spawn Dates","title":"Introduction","text":"date range dates spawning species interest required predict phenology. information can provided form single date range dates. information provide information available vignette Predict phenology: basic, well subsequent vignettes.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Introduction","text":"importing, wrangling, checking temperature data, number different actions can take. steps laid subsequent vignettes: Parameterize hatchR models Predict phenology: basic Predict phenology: advanced Predict phenology: nested Advanced plotting.","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Model_bibliography.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Model bibliography","text":"Adelfio, L. ., S. M. Wondzell, N. J. Mantua, G. H. Reeves. 2019. Warm winters reduce landscape-scale variability duration egg incubation coho salmon (Oncorhynchus kisutch) Copper River Delta, Alaska. Canadian Journal Fisheries Aquatic Sciences 76(8):1362–1375. Alderdice, D. F., F. P. J. Velsen. 1978. Relation Temperature Incubation Time Eggs Chinook Salmon (Oncorhynchus tshawytscha). Journal Fisheries Research Board Canada 35(1):69–75. Austin, C. S., T. E. Essington, T. P. Quinn. 2019. Spawning emergence phenology bull trout Salvelinus confluentus differing thermal regimes. Journal Fish Biology 94(1):191–195. Beacham, T. D., C. B. Murray. 1990. Temperature, Egg Size, Development Embryos Alevins Five Species Pacific Salmon: Comparative Analysis. Transactions American Fisheries Society 119(6):927–945. Drinan, D. P., . V. Zale, M. . H. Webb, M. L. Taper, B. B. Shepard, S. T. Kalinowski. 2012. Evidence Local Adaptation Westslope Cutthroat Trout. Transactions American Fisheries Society 141(4):872–880. Fuhrman, . E., D. . Larsen, E. . Steel, G. Young, B. R. Beckman. 2018. Chinook salmon emergence phenotypes: Describing relationships temperature, emergence timing condition factor reaction norm framework. Ecology Freshwater Fish 27(1):350–362. Gorodilov, Y. N. 1996. Description early ontogeny Atlantic salmon, Salmo salar, novel system interval (state) identification. Environmental Biology Fishes 47(2):109–127. Hendry, . P., J. E. Hensleigh, R. R. Reisenbichler. 1998. Incubation temperature, developmental biology, divergence sockeye salmon (Oncorhynchus nerka) within Lake Washington. Canadian Journal Fisheries Aquatic Sciences 55(6):1387–1394. Hubert, W. ., R. W. Stonecypher, W. . Gern, J. Bobbit. 1994. Communications: Response Cutthroat Trout Embryos Reduced Incubation Temperatures Different Developmental Stages. Progressive Fish-Culturist 56(3):185–187. Konecki, J. T., C. . Woody, T. P. Quinn. 1995. Influence temperature incubation rates Coho Salmon (Oncorhynchus kisutch) ten Washington populations. Northwest Science 69(2):126–132. Merriman, D. 1935. Effect Temperature Development Eggs Larvae Cut-Throat Trout (Salmo Clarkii Clarkii Richardson). Journal Experimental Biology 12(4):297–305. Murray, C. B., T. D. Beacham, J. D. McPhail. 1990. Influence parental stock incubation temperature early development coho salmon ( Oncorhynchus kisutch ) British Columbia. Canadian Journal Zoology 68(2):347–358. Pepin, P. 1991. Effect Temperature Size Development, Mortality, Survival Rates Pelagic Early Life History Stages Marine Fish. Canadian Journal Fisheries Aquatic Sciences 48(3):503–518. Quinn, T. P. 2018. Behavior Ecology Pacific Salmon Trout. University Washington Press. Rooke, . C., B. Palm-Flawd, C. F. Purchase. 2019. impact changing winter climate hatch phenology one North America’s largest Atlantic salmon populations. Conservation Physiology 7(1):coz015. Small, B. C., T. D. Bates. 2001. Effect Low-Temperature Incubation Channel Catfish Ictalurus punctatus Eggs Development, Survival, Growth. Journal World Aquaculture Society 32(2):189–194. Smith, K. M., D. K. King. 2005. Dynamics extent larval lake sturgeon Acipenser fulvescens drift Upper Black River, Michigan. Journal Applied Ichthyology 21(3):161–168. Sparks, M. M., P. . H. Westley, J. . Falke, T. P. Quinn. 2017. Thermal adaptation phenotypic plasticity warming world: Insights common garden experiments Alaskan sockeye salmon. Global Change Biology 23(12):5203–5217. Tang, J., M. D. Bryant, E. L. Brannon. 1987. Effect Temperature Extremes Mortality Development Rates Coho Salmon Embryos Alevins. Progressive Fish-Culturist 49(3):167–174. Webster, D. . 1948. Relation Temperature Survival Incubation Eggs Smallmouth Bass (Micropterus Dolomieu). Transactions American Fisheries Society 75(1):43–47. Zeigler, M. P., S. F. Brinkman, C. . Caldwell, . S. Todd, M. S. Recsetar, S. . Bonar. 2013. Upper Thermal Tolerances Rio Grande Cutthroat Trout Constant Fluctuating Temperatures. Transactions American Fisheries Society 142(5):1395–1405.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Parameterize hatchR Models","text":"vignette describes two options selecting parameterized models predicting fish early life history phenology using hatchR: model parameterizations included package custom parameterizations using data (.e., days hatch emerge average incubation temperature)","code":"library(hatchR) library(tibble) library(ggplot2)"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"built-in-parameterizations","dir":"Articles","previous_headings":"","what":"Built-in parameterizations","title":"Parameterize hatchR Models","text":"Published model parameterizations contained model_table object. includes parameterizations several salmonid species hatchery studies relating temperature hatch emergence timing Sparks et al. (2019), can selected using hatchR::model_select(). models parameterized 50% hatch emergence (see Velsen (1987) details). important remember models predict point estimate, hatch emergence, even within single spawning family occur distribution phenological event.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"model_table","dir":"Articles","previous_headings":"Built-in parameterizations","what":"model_table","title":"Parameterize hatchR Models","text":"model_table loaded hatchR, tibble 51 rows 5 columns: author: author-date key denoting publication containing model parameterization species: species model parameterized model: model ID (multiple model parameterizations built (e.g., Beacham Murray (1990)) development_type: phenological development type (.e., hatch emerge) expression: character string defining model parameterization","code":"model_table #> # A tibble: 51 × 5 #>   author                  species model_id development_type expression           #>   <chr>                   <chr>   <chr>    <chr>            <chr>                #> 1 Beacham and Murray 1990 sockeye 2        hatch            1 /exp(6.727 - log(… #> 2 Beacham and Murray 1990 sockeye 4        hatch            1/exp(8.734 + (-1.5… #> 3 Beacham and Murray 1990 sockeye 5        hatch            1/exp(9.848 + (-1.5… #> 4 Beacham and Murray 1990 sockeye 7        hatch            1/exp(5.379 + (-0.0… #> 5 Beacham and Murray 1990 sockeye 2        emerge           1 / exp(7.227 - log… #> # ℹ 46 more rows"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"model_select","dir":"Articles","previous_headings":"Built-in parameterizations","what":"model_select()","title":"Parameterize hatchR Models","text":"Combinations author, species, model, development_type unique used select parameterized model expressions. instance, wanted access expression sockeye salmon (Oncorhynchus nerka) hatch phenology using model #2 Beacham Murray (1990), run: Note, arguments equivalent first line four columns model_table. model function object—case sockeye_hatch_mod—can passed predict_phenology(), demonstrate Predict Phenology: Basic vignette. see available characterizations use:","code":"sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    development_type = \"hatch\"   )  sockeye_hatch_mod #> # A tibble: 1 × 5 #>   author                  species model_id development_type expression           #>   <chr>                   <chr>   <chr>    <chr>            <chr>                #> 1 Beacham and Murray 1990 sockeye 2        hatch            1 /exp(6.727 - log(… View(model_table)"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"creating-custom-models","dir":"Articles","previous_headings":"","what":"Creating custom models","title":"Parameterize hatchR Models","text":"hatchR also includes basic functionality generate model parameterizations predicting hatching emergence phenology using data. Importantly, functionality implements model form #2 Beacham Murray (1990), chose overall simplicity negligible loss accuracy. See Beacham Murray (1990) Sparks et al. (2019) specific discussion regarding model #2 development effective value approach. model follows general format : EffectiveValuei=1/exp(logea−loge(Temperaturei−b)) Effective Value_i = 1/exp(log_ea - log_e(Temperature_i - b)) daily value fish hatches emerges cumulative sum reaches one: ∑=1nEffectiveValuei=1\\sum_{=1}^nEffectiveValue_i = 1","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"fit_model","dir":"Articles","previous_headings":"Creating custom models","what":"fit_model()","title":"Parameterize hatchR Models","text":"function fit_model() uses data average incubation temperature (°C) days phenological event inputs estimates parameter coefficients logea b using stats::nls(). , borrow data Table 8.1 (pg. 183) Quinn (2018) generate custom hatch parameterization brown trout (Salmo trutta). either create .csv file data import readr::read_csv() alternatively, directly input object R. ’ll use tibble::tibble() create data. can plot data validity check using ggplot2:  can now use fit_model() create custom parameterization data. must specify species development type, information carried forward subsequent functions hatchR. output fit_model() list several elements: bt_fit$model: model object class “nls” containing nonlinear regression model bt_fit$log_a: named numeric vector estimated coefficient logea bt_fit$b: named numeric vector estimated coefficient b bt_fit$r_squared: pseudo R-squared value (1 - (residual sum squares / total sum squares)) bt_fit$mse: mean squared error (mean(residuals^2)) bt_fit$rmse: root mean squared error (sqrt(mse) bt_fit$expression: tibble species, development type, parameterized model expression bt_fit$pred_plot: ggplot object showing observed data predicted values  vast majority time, want actual expression parameter estimates use model = ... argument predict_phenology(). stored expression element list. can either pass tibble directly $ operator calling $expression element list (e.g., model = bt_fit$expression) set object pass, like : predict_phenology() extract expression object use predict phenology. demonstrate Predict phenology: Basic vignette.","code":"bt_data <- tibble(   temperature = c(2,5,8,11,14),    days_to_hatch = c(194,87,54,35,28)   ) bt_data #> # A tibble: 5 × 2 #>   temperature days_to_hatch #>         <dbl>         <dbl> #> 1           2           194 #> 2           5            87 #> 3           8            54 #> 4          11            35 #> 5          14            28 bt_data |>    ggplot(aes(x = temperature, y = days_to_hatch)) +   geom_point() +   theme_classic() bt_fit <- fit_model(temp = bt_data$temperature,                      days = bt_data$days_to_hatch,                      species = \"brown_trout\",                      development_type = \"hatch\") bt_fit #> $model #> Nonlinear regression model #>   model: y ~ a/(x - b) #>    data: df #>        a        b  #> 439.1634  -0.2582  #>  residual sum-of-squares: 36.92 #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 2.062e-07 #>  #> $log_a #> [1] 6.084872 #>  #> $b #> [1] -0.2582361 #>  #> $r_squared #> [1] 0.9979987 #>  #> $mse #> [1] 7.38454 #>  #> $rmse #> [1] 2.717451 #>  #> $expression #> # A tibble: 1 × 3 #>   species     development_type expression                                        #>   <chr>       <chr>            <chr>                                             #> 1 brown_trout hatch            1 / exp(6.08487164651134 - log(x + 0.25823605907… #>  #> $pred_plot bt_hatch_exp <- bt_fit$expression bt_hatch_exp #> # A tibble: 1 × 3 #>   species     development_type expression                                        #>   <chr>       <chr>            <chr>                                             #> 1 brown_trout hatch            1 / exp(6.08487164651134 - log(x + 0.25823605907…"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"fitting-models-for-other-fishes","dir":"Articles","previous_headings":"Creating custom models","what":"Fitting models for other fishes","title":"Parameterize hatchR Models","text":"demonstrate fit_model() function may used create custom parameterizations species beyond Salmonids model_table included package. include parameterizations three warm-water species demonstrate fit_model() utility fishes beyond scope original effective value approach. parameterizations commonly cultured sportfishes including Smallmouth Bass (Micropterus dolomieu) (Webster 1948), Channel Catfish (Ictalurus punctatus) (Small Bates 2001) , Lake Sturgeon (Acipenser fulvescens) (Smith King 2005). demonstrate utility approach creating random thermal regime ascending thermograph mean temperature 16 °C, parameterizing models species, demonstrating days hatch developmental period species random thermal regime . Next ’ll parameterize models three different fishes Note R2 fit models . can see generally preform well line values model 2 Beacham Murray (1990). fits species can predict phenology using data_sim datset created . predictions ’ll combine results little data cleaning. finally can plot results.","code":"###  make temp regime set.seed(123) # create random temps and corresponding dates temps_sim <- sort(rnorm(n =30, mean = 16, sd = 1), decreasing = FALSE) dates_sim <-  seq(from = ymd(\"2000-07-01\"),              to = ymd(\"2000-07-31\"), length.out = 30)  data_sim <- matrix(NA, 30, 2) |> data.frame() data_sim[,1] <- temps_sim data_sim[,2] <- dates_sim  # change names so they aren't the same as the vector objects colnames(data_sim) <- c(\"temp_sim\", \"date_sim\") ### smallmouth mod smallmouth <- matrix(NA, 10, 2) |> data.frame() colnames(smallmouth) <- c(\"hours\", \"temp_F\") smallmouth$hours <- c(52, 54, 70, 78, 90, 98, 150, 167, 238, 234) smallmouth$temp_F <- c(77, 75, 71, 70, 67, 65, 60, 59, 55, 55)  # change °F to °C and hours to days smallmouth <- smallmouth |>    mutate(days = ceiling(hours/24),          temp_C = (temp_F -32) * (5/9))  # model object for smallmouth bass  smb_mod <- fit_model(temp = smallmouth$temp_C,                      days = smallmouth$days,                      species = \"smb\",                      development_type = \"hatch\")  ### catfish mod catfish <- matrix(NA, 3, 2) |> data.frame() colnames(catfish) <- c(\"days\", \"temp_C\") catfish$days <- c(16,21,26) catfish$temp_C <- c(22,10,7)  cat_mod <- fit_model(temp = catfish$temp_C,                      days = catfish$days,                      species = \"catfish\",                      development_type = \"hatch\")  ### lake sturgeon mod sturgeon <-  matrix(NA, 7, 2) |> data.frame() colnames(sturgeon) <- c(\"days\", \"CTU\") sturgeon$days <- c(7,5,6,6,5,11,7) sturgeon$CTU <- c(58.1, 62.2, 61.1, 57.5, 58.1, 71.4, 54.7)  sturgeon <- sturgeon |>    mutate(temp_C = CTU/days) # change CTUs to average temp and add column  sturgeon_mod <- fit_model(days = sturgeon$days,                           temp = sturgeon$temp_C,                           species = \"sturgeon\",                           development_type = \"hatch\") #model fits smb_mod$r_squared; cat_mod$r_squared; sturgeon_mod$r_squared #> [1] 0.9868067 #> [1] 0.9433598 #> [1] 0.9217358 ### predict_phenology  #smallmouth bass smb_res <- predict_phenology(data = data_sim,                   dates = date_sim,                   temperature = temp_sim,                   spawn.date = \"2000-07-01\",                   model = smb_mod$expression)  # catfish catfish_res <- predict_phenology(data = data_sim,                   dates = date_sim,                   temperature = temp_sim,                   spawn.date = \"2000-07-01\",                   model = cat_mod$expression)  # sturgeon # note that 16 C is pretty far out of range of temps for model fit, not best practice sturgeon_res <- predict_phenology(data = data_sim,                   dates = date_sim,                   temperature = temp_sim,                   spawn.date = \"2000-07-01\",                   model = sturgeon_mod$expression) # summary for all species all_res <- data.frame(matrix(NA, 3, 2)) colnames(all_res) <- c(\"start\", \"stop\")  all_res$start <- c(catfish_res$dev_period$start,                     smb_res$dev_period$start,                     sturgeon_res$dev_period$start)  all_res$stop <- c(catfish_res$dev_period$stop,                   smb_res$dev_period$stop,                    sturgeon_res$dev_period$stop)   all_res <- all_res |>    mutate(days = ceiling(stop-start),          index = c(17,16.5,16)) # index for our horizontal bars  all_res$Species <- c(\"Channel Catfish\", \"Smallmouth Bass\", \"Lake Sturgeon\") ggplot() +   geom_point(data = data_sim, aes(x = date_sim, y = temp_sim )) +    geom_line(data = data_sim, aes(x = date_sim, y = temp_sim )) +   geom_rect(data = all_res, aes(xmin = start, xmax = stop, ymax =index-.35, ymin = index-.5, fill = Species)) +   geom_label(data = all_res, aes(x = start + (stop - start) / 1.25, y = (index -0.425), label = days)) +   labs(x = \"Date\", y = \"Temperature (°C)\") +   scale_fill_manual(values = c(\"deepskyblue4\", \"grey23\", \"darkolivegreen4\")) +   theme_classic() +   theme(legend.position = c(0.75, 0.25))"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"important-considerations","dir":"Articles","previous_headings":"","what":"Important considerations","title":"Parameterize hatchR Models","text":"important considerations: model fits good data generated . recommend minimum four temperature x hatch/emerge data points. Data spread across temperatures much possible. ’s much better fit derived data temperatures 3, 7, 10, 14 °C 8, 9, 10, 11 °C. behavior model function around tails cold warm temperatures (relative fish species) drive fit function, extreme temperatures helpful. Think hard whether data generating parameterization match data trying predict extrapolating beyond sensible model. Understand response variable, models fit 50% hatch emergence family group population. However, data may different interpret results accordingly (e.g. comparisons 50% hatch population 95% hatch population B may reasonable).","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: advanced","text":"function predict_phenolgy() purposefully kept fairly simple can expanded iterate across datasets. Typically, take form loops vectorizing R (functions map() family purrr apply() family base). many reasons might want iterate, including predicting multiple years, multiple sites, predicting hatch emergence simultaneously, even using multiple potential spawn dates. ’ll show examples (moving less complicated). First, load packages:","code":"library(hatchR) # for data and phenology modeling library(ggplot2) # for additional plotting options library(purrr) # for iteration library(lubridate) # for date manipulation library(tibble) # for data manipulation library(dplyr) # for data manipulation library(tidyr) # for data manipulation"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"multiple-spawn-dates","dir":"Articles","previous_headings":"","what":"Multiple spawn dates","title":"Predict fish phenology: advanced","text":"Given example used Predict Phenology-Basic vignette, perhaps now want expand predict multiple spawn dates (e.g., early, peak, late part spawning distribution) Woody Island population Lake Iliamna. Using Table 1 Sparks et al. (2019) see spawning range August 14 September 3rd, peak occurring August 18th. can set dates vector run model . go typical process getting model parameterized previously. Now can automate model. ’ll demonstrate two ways—loop vectorized approach.","code":"WI_spawn_dates <- c(\"1990-08-14\", \"1990-08-18\", \"1990-09-3\") sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model_id = 2,   development_type = \"hatch\" )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"looping","dir":"Articles","previous_headings":"Multiple spawn dates","what":"Looping","title":"Predict fish phenology: advanced","text":"show example set loop run element woody_island dataset. Inspect loop output: can also see made tibble dates predicted days hatch: don’t want full output run predict_phenolgy() just example want predicted days hatch, ’s easier access elements within loop demonstrated temp object section demonstrated loop.","code":"# Loop storage objects OUT_loop_all <- NULL OUT_loop_d2h <- NULL  # Loop body for (d in 1:length(WI_spawn_dates)) { # d will be our numerical iterator    # subset the element d of the vector and assign to object   WI_spawn <- WI_spawn_dates[d]    # predict phenology   WI_hatch <- predict_phenology(     data = woody_island,     dates = date,     temperature = temp_c,     spawn.date = WI_spawn,     model = sockeye_hatch_mod   )    ### ALL output ###   # do this if we want to maintain all info predict_phenology   OUT_loop_all[[d]] <- WI_hatch    ### A single element of output ###   # alternatively, subsets out output   temp <- tibble(matrix(data = NA, ncol = 2, nrow = 1)) # empty dataframe to add in data   colnames(temp) <- c(\"spawn_date\", \"days_2_hatch\") # change column names   temp$spawn_date <- WI_spawn # assign spawn date   temp$days_2_hatch <- WI_hatch$days_to_develop # assign days to hatch   OUT_loop_d2h <- rbind(OUT_loop_d2h, temp) # row bind temp object and OUT object } glimpse(OUT_loop_all) #> List of 3 #>  $ :List of 4 #>   ..$ days_to_develop: int 71 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef_table       : tibble [71 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 74 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef_table       : tibble [74 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 110 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef_table       : tibble [110 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr> OUT_loop_d2h #> # A tibble: 3 × 2 #>   spawn_date days_2_hatch #>   <chr>             <int> #> 1 1990-08-14           71 #> 2 1990-08-18           74 #> 3 1990-09-3           110"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"mapping","dir":"Articles","previous_headings":"Multiple spawn dates > Vectorizing","what":"Mapping","title":"Predict fish phenology: advanced","text":"Vectorizing, historically prioritizing speed, now making code readable (see Chapter 26 R Data Science chapter 9 Advanced R). ’ll demonstrate using purrr::map(). unfamiliar mapping want learn works ’s power, highly recommend linked chapters R Data Science Advanced R.","code":"# map works by applying a function over a list (our vector is a very simple list) # if you are familiar with apply() functions, map is essentially the same  results_map <- map(   WI_spawn_dates, # vector we are mapping over   predict_phenology, # function we are mapping with (note no \"()\"),   data = woody_island, # additional arguments required by predict_phenology   dates = date,   temperature = temp_c,   model = sockeye_hatch_mod )  # we now have a list of lists the same as OUT_loop_all glimpse(results_map) #> List of 3 #>  $ :List of 4 #>   ..$ days_to_develop: int 71 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef_table       : tibble [71 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 74 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef_table       : tibble [74 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 110 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef_table       : tibble [110 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  # we can then access days to hatch easily as such results_map |> map_dbl(\"days_to_develop\") #> [1]  71  74 110"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"apply","dir":"Articles","previous_headings":"Multiple spawn dates > Vectorizing","what":"Apply","title":"Predict fish phenology: advanced","text":"tidyverse packages like purrr become quite popular, base functionality R long set functions similar things map. called apply family. hatchR built using much functionality tidyverse opt using purrr:::map() apply() functions, however demonstrate similar workflow using apply family. can see lapply() purrr::map() output results:","code":"# lapply() is the equivalent function as map() in the apply family # they both output lists  results_lapply <- lapply(WI_spawn_dates, # vector we are mapping over   predict_phenology, # function we are mapping with (note no \"()\"),   data = woody_island, # additional arguments required by predict phenology   dates = date,   temperature = temp_c,   model = sockeye_hatch_mod ) glimpse(results_lapply) #> List of 3 #>  $ :List of 4 #>   ..$ days_to_develop: int 71 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef_table       : tibble [71 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 74 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef_table       : tibble [74 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 4 #>   ..$ days_to_develop: int 110 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef_table       : tibble [110 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"iterating-over-multiple-variables","dir":"Articles","previous_headings":"","what":"Iterating over multiple variables","title":"Predict fish phenology: advanced","text":"obvious extension example use sites multiple years data predict hatch emergence. example Predict Phenology-Basic vignette, saw days logger appeared water, let’s use cleaner dataset. example use temperature Crooked River, tributary Boise River Idaho, USA, reach known bull trout spawning. dataset included crooked_river.  can use functionality dplyr data check shows number observations per year: see 5 full years data use. sake exercise, let’s assume bull trout spawning system starts September 1st, peaks September 15th, mostly done September 30th. Remember, data starts just barely 2010, spawning years 2011-2015. However may enough days record make predictions 2015 best check first. First let’s just check see fish spawning 2015 enough data hatch emerge. See receive 2 separate warning messages saying: “Fish accrue enough effective units develop. fish spawn close end data? Spawn date _____”. tells us spawn date used can reference date isn’t working use string multiple dates predict . fish aren’t hatching definitely going emerge, won’t use 2015.","code":"# look at data structure glimpse(crooked_river) #> Rows: 1,826 #> Columns: 2 #> $ date   <dttm> 2010-12-01, 2010-12-02, 2010-12-03, 2010-12-04, 2010-12-05, 20… #> $ temp_c <dbl> 1.1638020, 1.3442852, 1.2533443, 1.0068728, 1.2899153, 1.229158…  # visually check data plot_check_temp(   data = crooked_river,   dates = date,   temperature = temp_c,   temp_min = 0,   temp_max = 12 ) crooked_river |>   mutate(year = lubridate::year(date)) |>   group_by(year) |>   tally() #> # A tibble: 6 × 2 #>    year     n #>   <dbl> <int> #> 1  2010    31 #> 2  2011   365 #> 3  2012   366 #> 4  2013   365 #> 5  2014   365 #> # ℹ 1 more row # select bull trout hatch and emergence models bull_hatch_mod <- model_select(   author = \"Austin et al. 2019\",   species = \"bull trout\",   model = \"MM\",   development_type = \"hatch\" # note we are using hatch model here )  bull_emerge_mod <- model_select(   author = \"Austin et al. 2019\",   species = \"bull trout\",   model = \"MM\",   development_type = \"emerge\" # note we are using emerge model here )  # set spawning dates in 2015 dates_2015 <- c(\"2015-09-01\", \"2015-09-15\", \"2015-09-30\")  ## hatch first hatch_2015 <- dates_2015 |> purrr::map(   predict_phenology,   data = crooked_river,   dates = date,   temperature = temp_c,   model = bull_hatch_mod )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"looping-1","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Looping","title":"Predict fish phenology: advanced","text":"build nested loop automate model selection variables dates. order applying predict_phenology() function loop example follows: 2011 spawn dates … 2014 spawn dates 2011 spawn dates … 2014 spawn dates output loop list lists. time 24 lists comprise elements predict_phenology() iteration. Simply, loop selects hatch model, runs every date vector (spawn_dates) switches emerge model thing. point iterator () can make new list addition every combination dev_mod (hatch emerge) 12 dates want run—resulting 24 total individual lists appended list lists walk iteration loop. sounds bit complicated, ’s . vectorized approaches really shine. quick note accessing lists. Even want write loops instead vectorizing, recommend accessing results via vectorized approach. ’s hard pull lot information large nested loops. probably write custom loop . However, results easily accessed map, like : code outputs ef_table element every one lists combination spawn date phenology type dataframe like object can easily plotted. Notice, now use purrr::map_df() know list element accessing format dataframe type object (tibble).","code":"## mini loop to make vector of dates spawn_dates <- NULL for (year in 2011:2014) {   temp_dates <- c(paste0(year, \"-09-01\"), paste0(year, \"-09-15\"), paste0(year, \"-09-30\"))   spawn_dates <- c(spawn_dates, temp_dates) } spawn_dates #>  [1] \"2011-09-01\" \"2011-09-15\" \"2011-09-30\" \"2012-09-01\" \"2012-09-15\" #>  [6] \"2012-09-30\" \"2013-09-01\" \"2013-09-15\" \"2013-09-30\" \"2014-09-01\" #> [11] \"2014-09-15\" \"2014-09-30\"  ### loop for prediction OUT <- NULL i <- 1 # build a counter for adding to our list of lists (OUT)  for (mod in c(\"hatch\", \"emerge\")) { # loop for hatch and emerge    # here we just iterate model selection over the two hatch and emerge options   # in the first for loop   dev_mod <- model_select(     author = \"Austin et al. 2019\",     species = \"bull trout\",     model = \"MM\",     development_type = mod   )    for (d in 1:length(spawn_dates)) { # nested loop over spawn dates      # here we iterate over every date of spawn_dates but run this loop twice,     # once for each value of the first for loop      spawn <- spawn_dates[d] # get spawn date      temp <- predict_phenology(       data = crooked_river,       dates = date,       temperature = temp_c,       spawn.date = spawn,       model = dev_mod     ) # notice we are calling the mod we set in the fist loop      OUT[[i]] <- temp      i <- i + 1 # add to your counter   } } mapped_results <- OUT |> purrr:::map_df(\"ef_table\") mapped_results #> # A tibble: 3,621 × 5 #>   index dates               temperature ef_vals ef_cumsum #>   <dbl> <dttm>                    <dbl>   <dbl>     <dbl> #> 1   275 2011-09-01 00:00:00        6.65  0.0148    0.0148 #> 2   276 2011-09-02 00:00:00        6.45  0.0144    0.0292 #> 3   277 2011-09-03 00:00:00        6.46  0.0144    0.0436 #> 4   278 2011-09-04 00:00:00        6.66  0.0148    0.0584 #> 5   279 2011-09-05 00:00:00        6.88  0.0152    0.0736 #> # ℹ 3,616 more rows"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"vectorizing-1","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Vectorizing","title":"Predict fish phenology: advanced","text":"’ll use purrr function purrr::pmap() vectorize multiple-input map function. Let’s set iterative variables. ’ll workflow past example now exclusively mapping. Now ’ve demonstrated loops mapping get iterating multiple variables, let’s verify results match.","code":"# slightly cleaner spawn dates with map output is a list of vectors spawn_dates <- map(   c(2011:2014), # year vector to map for custom function   function(year) { # custom function to make dates     c(       paste0(year, \"-09-01\"),       paste0(year, \"-09-15\"),       paste0(year, \"-09-30\")     )     }   ) |>    unlist()  dev_mods <- map(   c(\"hatch\", \"emerge\"),   model_select,   author = \"Austin et al. 2019\",   species = \"bull trout\",   model = \"MM\"   )  # we then set up a variable grid for all combinations of our models and dates # it is very important to make the names of the columns in var_grid to match the # arguments of the predict_phenology function (e.i., model = and spawn.date =)  var_grid <- expand_grid(model = dev_mods, spawn.date = spawn_dates) head(var_grid) #> # A tibble: 6 × 2 #>   model              spawn.date #>   <list>             <chr>      #> 1 <spc_tbl_ [1 × 5]> 2011-09-01 #> 2 <spc_tbl_ [1 × 5]> 2011-09-15 #> 3 <spc_tbl_ [1 × 5]> 2011-09-30 #> 4 <spc_tbl_ [1 × 5]> 2012-09-01 #> 5 <spc_tbl_ [1 × 5]> 2012-09-15 #> # ℹ 1 more row  ### multiple input mapping  crooked_predictions <- pmap(var_grid, # combos of variables to iterate over   predict_phenology, # function   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c ) # loop predictions preds_loop <- OUT |> map_dbl(\"days_to_develop\") preds_pmap <- crooked_predictions |> map_dbl(\"days_to_develop\")  # everything matches! preds_loop == preds_pmap #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"getting-usable-output","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Getting usable output","title":"Predict fish phenology: advanced","text":"basic output iterative processes big lists lists, can little annoying access data. However, different flavors map can friend. ’ve already shown examples access predictions, predict_phenology() outputs much data just point estimates. First ’ll demonstrate example can take prediction use create object ’s useful plotting. make plot original data:  best looking plot, good example translate output visual representation. better looking plots, please see Advanced plotting vignette. data types might want might include tibble dates, temperature, values cumulative sums effective values , alternatively, developmental period.","code":"# get predictions days <- crooked_predictions |>   map_dbl(\"days_to_develop\")  # make a vector of what type of phenology we were predicting # remember we ran hatch over 15 spawn dates then emerge over those same 15 phenology <- c(rep(\"hatch\", 12), rep(\"emerge\", 12))  # make a vector of our spawn dates replicated twice and turn into a timepoint spawning <- rep(spawn_dates, 2) |>   ymd(tz = \"UTC\") # we do this because the crooked_river dataset is ymd_hms  # put them all together in an object bull_trout_phenology <- tibble(phenology, spawning, days) head(bull_trout_phenology) #> # A tibble: 6 × 3 #>   phenology spawning             days #>   <chr>     <dttm>              <dbl> #> 1 hatch     2011-09-01 00:00:00    88 #> 2 hatch     2011-09-15 00:00:00   106 #> 3 hatch     2011-09-30 00:00:00   124 #> 4 hatch     2012-09-01 00:00:00    89 #> 5 hatch     2012-09-15 00:00:00   104 #> # ℹ 1 more row # filter crooked_river to correct size crooked_river_11_15 <- crooked_river |> filter(date < ymd_hms(\"2015-06-01 00:00:00\"))  ggplot(data = crooked_river_11_15, aes(x = date, y = temp_c)) +   geom_point(size = 0.25) +   geom_line() +   geom_point(     data = bull_trout_phenology,     aes(x = spawning, y = 10), color = \"darkblue\", shape = 25, size = 2.5   ) +   geom_point(     data = bull_trout_phenology |> filter(phenology == \"hatch\"),     aes(x = spawning + days(days), y = 0),     color = \"darkgreen\", shape = 24, size = 2.5   ) +   geom_point(     data = bull_trout_phenology |> filter(phenology == \"emerge\"),     aes(x = spawning + days(days), y = 0),     color = \"darkorange\", shape = 24, size = 2.5   ) +   labs(     title = \"Crooked River Bull Trout Developmental Phenology\",     subtitle = \"Blue = Spawn, Green = Hatch, Orange = Emerge\",     x = \"Date\",     y = \"Temperature\"   ) +   theme_classic() # the tibble with all temperature and effective values for each phenological period all_data <- crooked_predictions |>   map_df(\"ef_table\") head(all_data) #> # A tibble: 6 × 5 #>   index dates               temperature ef_vals ef_cumsum #>   <dbl> <dttm>                    <dbl>   <dbl>     <dbl> #> 1   275 2011-09-01 00:00:00        6.65  0.0148    0.0148 #> 2   276 2011-09-02 00:00:00        6.45  0.0144    0.0292 #> 3   277 2011-09-03 00:00:00        6.46  0.0144    0.0436 #> 4   278 2011-09-04 00:00:00        6.66  0.0148    0.0584 #> 5   279 2011-09-05 00:00:00        6.88  0.0152    0.0736 #> # ℹ 1 more row  # the phenological durations for each prediction set development_period <- crooked_predictions |>   map_df(\"dev_period\") head(development_period) #>        start       stop #> 1 2011-09-01 2011-11-27 #> 2 2011-09-15 2011-12-29 #> 3 2011-09-30 2012-01-31 #> 4 2012-09-01 2012-11-28 #> 5 2012-09-15 2012-12-27 #> 6 2012-09-30 2013-01-29"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"naming-your-lists","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Naming your lists","title":"Predict fish phenology: advanced","text":"problem approach end large lists lists without labels require remember data structure feed mapping function. However, purrr method get around purrr::set_names() function pipe mapping function. approach works well example , well examples purrr::pmap() variable grid create bunch expressions don’t work naming lists. However, purrr::pmap() example site x dates combination, still work name lists according site date used predict phenology (e.g. named_list$site1$`date`$dev_period)","code":"# to use the simple Iliamna Lake example within a single season WI_named_list <- WI_spawn_dates |>   set_names() |>   map(predict_phenology, # note we leave out the input row (WI_spawn_dates) because we are piping it in as input     data = woody_island, # additional arguments required by predict phenology     dates = date,     temperature = temp_c,     model = sockeye_hatch_mod   )  # you can now see each list is named according to its respective spawn date glimpse(WI_named_list) #> List of 3 #>  $ 1990-08-14:List of 4 #>   ..$ days_to_develop: int 71 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef_table       : tibble [71 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ 1990-08-18:List of 4 #>   ..$ days_to_develop: int 74 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef_table       : tibble [74 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ 1990-09-3 :List of 4 #>   ..$ days_to_develop: int 110 #>   ..$ dev_period     :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef_table       : tibble [110 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  # therefore a single element could be accessed with its name and the $ operator # if we wanted the dev_period for fish spawning on August 18th we would do the following  WI_named_list$`1990-08-18`$dev_period #>        start       stop #> 1 1990-08-18 1990-10-30"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: basic","text":"vignette demonstrates complete simple hatchR workflow. use data installed package Woody Island Lake Iliamna, Alaska (Sparks et al. 2019), predict hatch emergence timing sockeye salmon (Oncorhynchus nerka). already done , see vignettes data checks model parameterization. Additionally, predict_phenology() companion function, predict_spawn(), works backwards direction predict_phenology(). allows users predict spawn timing starting known hatch emergence timing—can read Predict spawning vignette. First, load needed packages:","code":"library(hatchR)    # for phenology modeling library(ggplot2)   # for additional plotting options library(lubridate) # for date manipulation library(tibble)    # for tidy tibbles and data manipulation library(dplyr)     # for data manipulation"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"data-checks","dir":"Articles","previous_headings":"","what":"Data checks","title":"Predict fish phenology: basic","text":"First, let’s check data make sure ’s right format. ’ll print first rows summary() get sense data: can see day already summarized mean temperature. can also see data spans multiple years. ’ll use plot_check_temp() make visually check data:  appear outliers data, specifically beginning end period record, right middle. loggers look recording observations outside water middle water level may dropped exposed air. However, spawning system typically peaks around August 18 hatching emergence done start following spawning season, can predict phenology within subset year. plot_check_temp() ggplot2 object, can add additional plotting elements graph represent approximate phenology window:  just apply model within gray polygon ’ve drawn, model work just fine.","code":"woody_island #> # A tibble: 735 × 2 #>   date       temp_c #>   <date>      <dbl> #> 1 1990-08-11   25.8 #> 2 1990-08-12   23.3 #> 3 1990-08-13   18.5 #> 4 1990-08-14   15.4 #> 5 1990-08-15   14.0 #> # ℹ 730 more rows summary(woody_island) #>       date                temp_c       #>  Min.   :1990-08-11   Min.   :-9.900   #>  1st Qu.:1991-02-10   1st Qu.: 1.733   #>  Median :1991-08-13   Median : 4.442   #>  Mean   :1991-08-13   Mean   : 5.272   #>  3rd Qu.:1992-02-12   3rd Qu.: 7.767   #>  Max.   :1992-08-14   Max.   :28.700 p <- plot_check_temp(   data = woody_island,   dates = date,   temperature = temp_c   ) p p +   geom_rect(     aes(       xmin = ymd(\"1990-08-18\"),       xmax = ymd(\"1991-04-01\"),       ymin = -10,        ymax = 25     ),      fill = \"gray\",     alpha = 0.01   )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"model-select","dir":"Articles","previous_headings":"","what":"Model select","title":"Predict fish phenology: basic","text":"Now temperature data usable, can select models. ’ll predict hatch emergence, obtain model expression using model_select(). argument model_select() must changed case development_type, can either “hatch” “emerge”. Let’s look model specifications two different parameterizations ’ve selected: can see parameterized slightly different account differences hatch emergence timing.","code":"sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   development_type = \"hatch\" )  sockeye_emerge_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   development_type = \"emerge\" ) sockeye_hatch_mod #> # A tibble: 1 × 5 #>   author                  species model_id development_type expression           #>   <chr>                   <chr>   <chr>    <chr>            <chr>                #> 1 Beacham and Murray 1990 sockeye 2        hatch            1 /exp(6.727 - log(… sockeye_emerge_mod #> # A tibble: 1 × 5 #>   author                  species model_id development_type expression           #>   <chr>                   <chr>   <chr>    <chr>            <chr>                #> 1 Beacham and Murray 1990 sockeye 2        emerge           1 / exp(7.227 - log…"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"predict-phenology","dir":"Articles","previous_headings":"","what":"Predict phenology","title":"Predict fish phenology: basic","text":"can now use model expressions predict sockeye hatch emerge Woody Island 1990. First predict hatch timing using predict_phenology(): Note warning message appears run code woody_island. reveals fish developed, negative temperature values resulted NaNs development. Negative Temperature section. Next, look inside returned object see days hatch development period (Understanding results section) can also emergence:","code":"WI_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod ) #> Warning: ! Fish developed, but negative temperature values resulted in NaNs after #>   development. #> ℹ Check date(s): 1991-08-12 #> ℹ Fish spawn date was: 1990-08-18 WI_hatch$days_to_develop #> [1] 74 WI_hatch$dev_period #>        start       stop #> 1 1990-08-18 1990-10-30 WI_emerge <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_emerge_mod # notice we're using emerge model expression here ) #> Warning: ! Fish developed, but negative temperature values resulted in NaNs after #>   development. #> ℹ Check date(s): 1991-08-12 #> ℹ Fish spawn date was: 1990-08-18  WI_emerge$days_to_develop #> [1] 204 WI_emerge$dev_period #>        start       stop #> 1 1990-08-18 1991-03-09"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"results","dir":"Articles","previous_headings":"","what":"Understanding your results","title":"Predict fish phenology: basic","text":"output predict_phenology() includes lot information. summary elements output list. can access element using $ operator: WI_hatch$days_to_develop outputs predicted days hatch emerge. WI_hatch$dev_period 1x2 dataframe dates corresponding fish’s parent spawned (input predict_phenology(spawn.date = ...)) date fish predicted hatch emerge. WI_hatch$ef_table n x 5 tibble (n = number days hatch emerge) columns row index, date, day’s temperature, effective value, cumulative sum effective values date. ef_table object meant serve basis users make custom figures data beyond functionality discuss . WI_hatch$model_specs tibble showing model specifications used predict phenology.","code":"summary(WI_hatch) #>                 Length Class       Mode    #> days_to_develop 1      -none-      numeric #> dev_period      2      data.frame  list    #> ef_table        5      tbl_df      list    #> model_specs     5      spec_tbl_df list"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"visualizing-phenology","dir":"Articles","previous_headings":"","what":"Visualizing phenology","title":"Predict fish phenology: basic","text":"hatchR built function, plot_phenology(), allows users visualize phenology results. plot visualizes three specific components: temperature regime predicting cumulative sum effective values effective value day prediction span function allows output various figures based interests, defaults figure information lots labeling. output plot_phenology() cumulative effective values scaled warmest temperature ef_table daily effective values scaled multiplying 100 everything visibly congruent figure. Let’s look basic call, gives information:  can turn labeling plot specific values using function arguments style labels, example (plots rendered):","code":"plot_phenology(WI_hatch) # shows a plot with just the ef cumulative sum values plot_phenology(WI_hatch, style = \"ef_cumsum\") # shows a plot with just the ef daily values plot_phenology(WI_hatch, style = \"ef_daily\")  # turns off the labeling for a cleaner figure plot_phenology(WI_hatch, labels = FALSE)"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"negtemps","dir":"Articles","previous_headings":"","what":"A note about negative temperatures","title":"Predict fish phenology: basic","text":"Occasionally, temperature data sets negative values values close 0. Negative numbers certain threshold output “number” (NaN) effective values undefined model expression break function. Similarly, even negative values threshold produce small effective values. values small, allow model accumulate even though development 0 biologically unlikely. assume data set checked values doesn’t include long periods freezing, however model allows occasional dip freezing effect negligible toward development incubation. toy example phenomenon shown .","code":"# vector of temps from -5 to 15 by 0.5 x <- seq(from = -5, to = 15, by = 0.5) x #>  [1] -5.0 -4.5 -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0 #> [16]  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 #> [31] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 15.0  # get effective values for those temperatures # You can see the NaN warning that shows up in our past applications demo_ef_vals <- eval(parse(text = sockeye_hatch_mod$expression)) demo_ef_vals #>  [1]         NaN         NaN         NaN         NaN         NaN         NaN #>  [7] 0.000472060 0.001071121 0.001670182 0.002269243 0.002868304 0.003467365 #> [13] 0.004066426 0.004665487 0.005264548 0.005863609 0.006462670 0.007061731 #> [19] 0.007660792 0.008259853 0.008858914 0.009457975 0.010057036 0.010656097 #> [25] 0.011255157 0.011854218 0.012453279 0.013052340 0.013651401 0.014250462 #> [31] 0.014849523 0.015448584 0.016047645 0.016646706 0.017245767 0.017844828 #> [37] 0.018443889 0.019042950 0.019642011 0.020241072 0.020840133  # bring together as a tibble demo <- tibble(x, demo_ef_vals) demo #> # A tibble: 41 × 2 #>       x demo_ef_vals #>   <dbl>        <dbl> #> 1  -5            NaN #> 2  -4.5          NaN #> 3  -4            NaN #> 4  -3.5          NaN #> 5  -3            NaN #> # ℹ 36 more rows  # plot (note NaNs are removed from figure) # rectangle added to highlight the approximate temperatures of interest demo |>   ggplot(aes(x = x, y = demo_ef_vals)) +   geom_rect(     aes(       ymin = 0, ymax = 0.005,       xmin = -5, xmax = 2     ),     fill = \"dodgerblue\", alpha = 0.25   ) +   geom_point() +   geom_line() +   labs(x = \"Temperature (C)\", y = \"Effective Value\") +   theme_classic()"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: nested","text":"hatchR designed flexible achieve many applications. However, virtue built scripting application, hatchR able tackle large datasets relatively quickly efficiently. demonstrate example nested dataset multiple sites include multiple years data. First, load packages:","code":"library(hatchR) library(purrr)      # for mapping functions library(tidyr)      # for nesting data library(dplyr)      # for data manipulation library(lubridate)  # for date manipulation library(ggplot2)    # for plotting library(ggridges)   # for plotting"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"example-data","dir":"Articles","previous_headings":"Overview","what":"Example Data","title":"Predict fish phenology: nested","text":"’ll use dataset water temperature data Central Idaho. data downloaded (modified long format) Isaak et al. (2018) generally cover Boise, Payette, Clearwater, upper Salmon River watersheds. map shows locations 226 water temperature monitoring sites overlaid August stream temperature scenario 29 600 km network study area.  get started lets take quick look data. can see 226 sites 773,681 individual records water temperature. application, ’ll thinking sites putative bull trout (Salvelinus confluentus) spawning habitat. Bull trout generally observed mean August temperatures 13 °C. , ’ll first filter sites cooler 13 °C. Next ’ll want data checks make sure everything looks alright.","code":"# look at the first few rows idaho #> # A tibble: 773,681 × 3 #>   date                site      temp_c #>   <dttm>              <chr>      <dbl> #> 1 2010-12-01 00:00:00 PIBO_1345   0.07 #> 2 2010-12-01 00:00:00 PIBO_1346   0.53 #> 3 2010-12-01 00:00:00 PIBO_1350   0.47 #> 4 2010-12-01 00:00:00 PIBO_1368   0.1  #> 5 2010-12-01 00:00:00 PIBO_1375   0.33 #> # ℹ 773,676 more rows  # count number of unique sites idaho |>    pull(site) |>   unique() |>    length() #> [1] 226 # create a vector of site names with temps at or below 13 C bull_trout_sites <- idaho |>    mutate(month = month(date)) |> #make a month column (numeric)   filter(month == 8) |> # filter out Aug.   group_by(site) |> # apply grouping by site   summarise(mean_aug_temp = mean(temp_c)) |>    filter(mean_aug_temp <= 13) |> # keep only sites 13 C or cooler   pull(site) |>    unique()  # we now have a list of 139 sites length(bull_trout_sites) #> [1] 139  # only keep sites in our vector of bull trout sites idaho_bt <- idaho |>    filter(site %in% bull_trout_sites)   # still lots of data! idaho_bt #> # A tibble: 473,595 × 3 #>   date                site      temp_c #>   <dttm>              <chr>      <dbl> #> 1 2010-12-01 00:00:00 PIBO_1345   0.07 #> 2 2010-12-01 00:00:00 PIBO_1346   0.53 #> 3 2010-12-01 00:00:00 PIBO_1350   0.47 #> 4 2010-12-01 00:00:00 PIBO_1368   0.1  #> 5 2010-12-01 00:00:00 PIBO_1375   0.33 #> # ℹ 473,590 more rows # lets look at a couple individual sites PIBO_1345 <- idaho_bt |> filter(site == \"PIBO_1345\")  # looks nice plot_check_temp(PIBO_1345,                 dates = date,                 temperature = temp_c) # order by sample date PIBO_1345 |> arrange(date) #> # A tibble: 3,601 × 3 #>   date                site      temp_c #>   <dttm>              <chr>      <dbl> #> 1 2010-12-01 00:00:00 PIBO_1345   0.07 #> 2 2010-12-01 00:00:00 PIBO_1345   0.07 #> 3 2010-12-02 00:00:00 PIBO_1345   0.07 #> 4 2010-12-02 00:00:00 PIBO_1345   0.07 #> 5 2010-12-03 00:00:00 PIBO_1345   0.06 #> # ℹ 3,596 more rows # looks like there are multiple records per day  # so we need to summarize those in the larger dataset (idaho_bt)"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"nested-dataframes","dir":"Articles","previous_headings":"","what":"Nested Dataframes","title":"Predict fish phenology: nested","text":"package tidyr allows us use functionality called nested data (tidyr::nest()). datatset, can think terms dataframe made bunch smaller dataframes identifier separating data name site column. sub dataframes records site example can separate programatically can use function across without skipping next data field. utilizes approach applied purrr::map() allows us separate function across individual datasets stored larger dataframe. first example want summarize data day, can using following code. First let’s just look nesting actually make object. resulting data structure tibble new data column called data. data column actually list row contains individual tibble (dataframe). Since ’ll operating nests keep nest, however wanted change back original dataframe format ’s easy tidyr::unnest().","code":"idaho_bt |>    group_by(site) |>  # we group by site   nest() |> # nest our grouped data   head() #> # A tibble: 6 × 2 #> # Groups:   site [6] #>   site      data                 #>   <chr>     <list>               #> 1 PIBO_1345 <tibble [3,601 × 2]> #> 2 PIBO_1346 <tibble [3,570 × 2]> #> 3 PIBO_1350 <tibble [3,571 × 2]> #> 4 PIBO_1368 <tibble [3,581 × 2]> #> 5 PIBO_1375 <tibble [3,582 × 2]> #> # ℹ 1 more row isaak_summ_bt <- idaho_bt |>    group_by(site) |>    nest() |>    mutate(     summ_obj = map(       data,        summarize_temp,       temperature = temp_c,       dates = date       )     ) |>    select(site, summ_obj)   # look at first rows of full object isaak_summ_bt #> # A tibble: 139 × 2 #> # Groups:   site [139] #>   site      summ_obj             #>   <chr>     <list>               #> 1 PIBO_1345 <tibble [1,826 × 2]> #> 2 PIBO_1346 <tibble [1,826 × 2]> #> 3 PIBO_1350 <tibble [1,826 × 2]> #> 4 PIBO_1368 <tibble [1,826 × 2]> #> 5 PIBO_1375 <tibble [1,826 × 2]> #> # ℹ 134 more rows  # use purrr::pluck() the first site to see its structure isaak_summ_bt |> pluck(\"summ_obj\", 1) #> # A tibble: 1,826 × 2 #>   date       daily_temp #>   <date>          <dbl> #> 1 2010-12-01       0.07 #> 2 2010-12-02       0.07 #> 3 2010-12-03       0.06 #> 4 2010-12-04       0.06 #> 5 2010-12-05       0.07 #> # ℹ 1,821 more rows isaak_summ_bt |> unnest(cols = summ_obj) #> # A tibble: 253,814 × 3 #> # Groups:   site [139] #>   site      date       daily_temp #>   <chr>     <date>          <dbl> #> 1 PIBO_1345 2010-12-01       0.07 #> 2 PIBO_1345 2010-12-02       0.07 #> 3 PIBO_1345 2010-12-03       0.06 #> 4 PIBO_1345 2010-12-04       0.06 #> 5 PIBO_1345 2010-12-05       0.07 #> # ℹ 253,809 more rows"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"data-check","dir":"Articles","previous_headings":"Nested Dataframes","what":"Data Check","title":"Predict fish phenology: nested","text":"can last data check make sure continuous data. First ’ll use smaller example show works expand full dataset. Next can map() check_continuous() across nested data set.","code":"# Pull data from one site PIBO_1345_summ <- isaak_summ_bt |>   filter(site == \"PIBO_1345\") |>   unnest(cols = \"summ_obj\")  # We can then use the hatchR function to check that our data are continuous # We see from the message they are! check_continuous(data = PIBO_1345_summ, dates = date) #> ℹ No breaks were found. All clear!  # To demonstrate an example of our data not being continuous, we remove the 100th row check_continuous(data = PIBO_1345_summ[-100,], dates = date) #> Warning: ! Data not continuous #> ℹ Breaks found at rows: #> ℹ 100 # Map check_continuous() across isaak_summ_bt # We'll only do the first 5 nested objects so the output doesn't get too long  isaak_summ_bt[1:5,] |> # run on first five nested dataframes for convenience                        # remove [1:5,] to run on all nested objects    mutate(diff = map( # mutate a dummy diff column to run map     summ_obj, # nested data object (akin to \"data =\" argument in normal function)     check_continuous, # function name, no parentheses     dates = date # specify dates argument with column name of dates in summ_obj   )   ) #> ℹ No breaks were found. All clear! #> ℹ No breaks were found. All clear! #> ℹ No breaks were found. All clear! #> ℹ No breaks were found. All clear! #> ℹ No breaks were found. All clear! #> # A tibble: 5 × 3 #> # Groups:   site [5] #>   site      summ_obj             diff   #>   <chr>     <list>               <list> #> 1 PIBO_1345 <tibble [1,826 × 2]> <NULL> #> 2 PIBO_1346 <tibble [1,826 × 2]> <NULL> #> 3 PIBO_1350 <tibble [1,826 × 2]> <NULL> #> 4 PIBO_1368 <tibble [1,826 × 2]> <NULL> #> 5 PIBO_1375 <tibble [1,826 × 2]> <NULL>"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"mapping-across-nested-data","dir":"Articles","previous_headings":"Nested Dataframes","what":"Mapping Across Nested Data","title":"Predict fish phenology: nested","text":"Now data format want ’re confident doesn’t gaps can start map hatchR functions onto data. First need make vector spawn dates get model set . can map across nested dataframe. ’s output , output boatload warnings fish aren’t hatching. However, ’s pretty safe assume habitats actually cold bull trout places won’t hatched. trying make management decisions fish testing kind hypothesis worth following fish weren’t hatching, now, ’ll rest assumption ’s just cold. couple notes . First use purrr::map2() instead purrr::pmap() interchangeable long set variable grid purrr::pmap(). Secondly, ’re actually piping output purrr::map2() purrr::map_df() function can just pull dev_period list element predict_phenology() output. Otherwise ’d end list 4 outputs predict_phenology(), end pretty big object memory. better just store 1x2 vector dev_period. Lastly, purrr::map_df() piped list nested dataframe doesn’t know hold onto multiple dimension object (1x2 vector), just wants singular list containing elements. mind can plot data. Briefly, ’ll add extra set columns define whether fish spawned early, mid, late plot distributions across time periods.","code":"# spawn dataest spawn_dates <- map(   c(2011:2014), # year vector to map for custom function   function(year) { # custom paste function     c(       paste0(year, \"-09-01\"),       paste0(year, \"-09-15\"),       paste0(year, \"-09-30\")       )     }   ) |>    unlist()  # bull trout hatch model bt_hatch <- model_select(   development_type = \"hatch\",   author = \"Austin et al. 2019\",   species = \"bull trout\",   model = \"MM\" ) hatch_res <- isaak_summ_bt |>    mutate(     dev_period = map2(       summ_obj, spawn_dates,        predict_phenology,       temperature = daily_temp,       model = bt_hatch,       dates = date       ) |>        map_df(\"dev_period\") |>       list()     ) |>    select(site, dev_period) |> # just select the columns we want   unnest(cols = c(dev_period)) |> # unnest everything   mutate(days_to_hatch = stop - start) # make a new column of days to hatch  hatch_res #> # A tibble: 1,668 × 4 #> # Groups:   site [139] #>   site      start      stop       days_to_hatch #>   <chr>     <date>     <date>     <drtn>        #> 1 PIBO_1345 2011-09-01 2011-11-11  71 days      #> 2 PIBO_1345 2011-09-15 2011-12-27 103 days      #> 3 PIBO_1345 2011-09-30 2012-02-07 130 days      #> 4 PIBO_1345 2012-09-01 2012-11-26  86 days      #> 5 PIBO_1345 2012-09-15 2013-01-04 111 days      #> # ℹ 1,663 more rows hatch_res |>   mutate(day = day(start)) |>    mutate(spawn_time = case_when(     day == 1 ~ \"Early\",     day == 15 ~ \"Mid\",     day == 30 ~ \"Late\"   )) |>   mutate(spawn_time = factor(     spawn_time, levels = c(\"Late\", \"Mid\", \"Early\"),      ordered = TRUE)     ) |>    ggplot(aes(     x = as.integer(days_to_hatch),      y = spawn_time,      fill = spawn_time,      color = spawn_time     )) +    geom_density_ridges(alpha = 0.9) +   scale_fill_brewer(palette = \"Blues\", direction = 1) +   scale_color_brewer(palette = \"Blues\", direction = 1) +   labs(x = \"Days to hatch\", y = \"Spawn time\") +   theme_classic() +   theme(legend.position = \"none\")"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Predict spawning","text":"hatchR built function—predict_spawn()—allows users predict fish’s parent spawned based observation either fish hatched emerged. function works almost exactly predict_phenology() walks backwards point development (hatch emerge) outputs spawn date.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Predict spawning","text":"predict_spawn() works essentially fashion learned predict_phenology() Predict fish phenology: basic vignette. First select developmental model. determined life history stage empirical phenology data. example, maybe snorkeled stream observed bull trout emerging redd.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"model-selection","dir":"Articles","previous_headings":"Workflow","what":"Model selection","title":"Predict spawning","text":"empirical data observing juvenile bull trout emergence use bull trout emergence model using model_select() model_table. However, custom models used fashion.","code":"#select bull trout emergence model bt_emerge_mod <- model_select(author = \"Austin et al. 2019\",                                       species = \"bull trout\",                                       model = \"MM\",                                       development_type = \"emerge\"                               )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"predict-spawning","dir":"Articles","previous_headings":"Workflow","what":"Predict spawning","title":"Predict spawning","text":"’ll use crooked_river data set, temperature data reach spawning bull trout. model hand ’ll predict spawn timing assuming observed fish emerging March 21, 2015. outputted object exact structure predict_phenology() output. include slots: days_to_develop: days hatch emergence spawn dev_period: 1x2 dataframe start= predicted spawn time stop=empirical developmental event used prediction model. ef_table: n x 5 tibble n number days spawn development. Note table ordered development date moves backwards time. columns : index: row number temperature data set dates: dates imported temperature data temperature: daily average temperature imported temperature data ef_vals: every day’s individual effective value ef_cumsum: cumulative sum effective values moving backwards 1, fish hatches ef_cumsum <= 0. model_specs: model specifications imported developmental model provided predict_phenology() summary output bt_spawn presented . see, fish took 188 days emerge predicted spawning date September 15, 2014. Finally, model output essentially format predict_phenology() can plotted using plot_phenology() .","code":"#predict spawn timing using \"2015-03-21\" emergence date bt_spawn <- predict_spawn(data = crooked_river,               dates = date,               temperature = temp_c,               develop.date = \"2015-03-21\",               model = bt_emerge_mod               ) str(bt_spawn) #> List of 4 #>  $ days_to_develop: int 188 #>  $ dev_period     :'data.frame': 1 obs. of  2 variables: #>   ..$ start: POSIXct[1:1], format: \"2014-09-15\" #>   ..$ stop : POSIXct[1:1], format: \"2015-03-21\" #>  $ ef_table       : tibble [188 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ index      : num [1:188] 1572 1571 1570 1569 1568 ... #>   ..$ dates      : POSIXct[1:188], format: \"2015-03-21\" \"2015-03-20\" ... #>   ..$ temperature: num [1:188] 2.25 1.97 1.78 2 2.02 2.06 1.97 1.93 1.64 1.79 ... #>   ..$ ef_vals    : num [1:188] 0.00496 0.00479 0.00467 0.00481 0.00482 ... #>   ..$ ef_cumsum  : num [1:188] 0.995 0.99 0.986 0.981 0.976 ... #>  $ model_specs    : spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   ..$ author          : chr \"Austin et al. 2019\" #>   ..$ species         : chr \"bull trout\" #>   ..$ model_id        : chr \"MM\" #>   ..$ development_type: chr \"emerge\" #>   ..$ expression      : chr \"1/exp(5.590 - (x  * 0.126))\" #>   ..- attr(*, \"spec\")=List of 3 #>   .. ..$ cols   :List of 5 #>   .. .. ..$ author          : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ species         : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ model_id        : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ development_type: list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ expression      : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ default: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   .. ..$ delim  : chr \",\" #>   .. ..- attr(*, \"class\")= chr \"col_spec\" #>   ..- attr(*, \"problems\")=<externalptr> # development time bt_spawn$days_to_develop #> [1] 188  # spawning date bt_spawn$dev_period$start #> [1] \"2014-09-15 UTC\" plot_phenology(bt_spawn)"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"compare-to-predict_phenology","dir":"Articles","previous_headings":"Workflow > Predict spawning","what":"Compare to predict_phenology()","title":"Predict spawning","text":"demonstrate provides information predict_phenology() can compare outputs. Now use predicted spawn date \"2014-09-15\" input predict_phenology(). can compare dev_period verify outputs match.","code":"bt_emerge <- predict_phenology(data = crooked_river,               dates = date,               temperature = temp_c,               spawn.date = \"2014-09-15\",               model = bt_emerge_mod               ) # are they the same (yes!) bt_emerge$dev_period == bt_spawn$dev_period #>      start stop #> [1,]  TRUE TRUE  #print out values bt_emerge$dev_period; bt_spawn$dev_period #>        start       stop #> 1 2014-09-15 2015-03-21 #>        start       stop #> 1 2014-09-15 2015-03-21"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_spawning.html","id":"using-multiple-inputs-for-predict_spawn","dir":"Articles","previous_headings":"Workflow","what":"Using multiple inputs for predict_spawn()","title":"Predict spawning","text":"Like predict_phenology(), predict_spawn() can easily mapped across multiple variable sets automate function. can use simple example observing emerging fish across multiple months demonstrate. ’ll assume observed fish emerging February 15, March 15, April 15 2015. map() function across dates using purrr package. Based predictions, fish spawned respective observed emergence dates August 29, September 11, September 27 2014. predict_spawn() can automated greater extents just like predict_phenology(). recommend reading Predict fish phenology: advanced vignette review ways map across multiple variables.","code":"library(purrr)  #vector of dates emerge_days <- c(\"2015-02-15\",\"2015-03-15\", \"2015-04-15\")  # object for predicting spawn timing across three emergence days bt_multiple_emerge <- map(emerge_days, # vector of emergence dates                           predict_spawn, # predict_spawn function                           # everything below are arguments to predict_spawn()                           data = crooked_river,                           dates = date,                           temperature = temp_c,                           model = bt_emerge_mod)  # we can access just the dev_periods using map_df # the start column provides the predicted spawn dates bt_multiple_emerge |>    map_df(\"dev_period\") #>        start       stop #> 1 2014-08-29 2015-02-15 #> 2 2014-09-11 2015-03-15 #> 3 2014-09-27 2015-04-15"},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Launching Shiny","text":"hatchR Shiny app powerful tool interact hatchR package without needing write code. multiple ways interact Shiny app. first online Shiny server. second downloading Shiny directory Shiny code launching locally. walk options discuss respective pros cons.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"shiny-server","dir":"Articles","previous_headings":"","what":"Shiny server","title":"Launching Shiny","text":"easiest way interact hatchR’s Shiny app online Shiny server. server can accessed : https://elifelts.shinyapps.io/hatchR_demo/ However, drawback using method must continuous internet access many users used Shiny app given month, limited wall time (amount CPU hours available app) may used . either issues, can launch Shiny locally use app unlimited number times.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"using-shiny-locally","dir":"Articles","previous_headings":"","what":"Using Shiny locally","title":"Launching Shiny","text":"use Shiny app locally, need R (programming language) Rstudio (visual editor used interact R, sometimes called IDE integrated development environment) downloaded computer. already downloaded software, jump Rstudio section. can downloaded following locations (’s recommended download R first). R: https://www.r-project.org/ Rstudio: https://posit.co/downloads/","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"in-rstudio","dir":"Articles","previous_headings":"Using Shiny locally","what":"In Rstudio","title":"Launching Shiny","text":"R Rstudio downloaded, Shiny app can easily launched. First Shiny package need installed. Using Rstudio, console script run:","code":"install.packages(\"shiny\")"},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"with-internet","dir":"Articles","previous_headings":"Using Shiny locally > In Rstudio","what":"With internet","title":"Launching Shiny","text":"Shiny package installed, simply run either script console. launch Shiny app HTML window Rstudio. recommend transferring RStudio viewer pane internet browser. can accomplished clicking “Open Browser” RStudio HTML window. Now app available use just online resource, without limitations limited wall time continuous internet connection. can rerun line relaunch Shiny app time. Note: app runs using packages just shiny:: mentioned previous section. app automatically install packages first time used. Briefly, command refers GitHub website page hosts Shiny app accesses using shiny::runGitHub(repository_name, repository_user_name). either repository name host’s user name changed GitHub easily accessed correctly changing script accordingly. makes sense visit Shiny app GitHub can see efelts-usfws hosts hatchR_shiny repository (GitHub directory) https://github.com/efelts-usfws/hatchR_shiny.","code":"shiny::runGitHub(\"hatchR_shiny\", \"efelts-usfws\")"},{"path":"https://bmait101.github.io/hatchR/articles/Shiny_app.html","id":"without-internet","dir":"Articles","previous_headings":"Using Shiny locally > In Rstudio","what":"Without internet","title":"Launching Shiny","text":"Importantly, still need internet download Shiny app Shiny package (install.packages(\"shiny\")) first time, need access downloaded. easiest way install Shiny app navigate GitHub page download zipped directory app. https://github.com/efelts-usfws/hatchR_shiny GitHub page (repository)—shown —software can downloaded navigating green <> Code button. clicked drop box appear, Local tab bottom Download Zip link (highlighted purple).  download zipped directory personal computer, wherever online downloads sent machine. need unzip directory. unzipped directory can kept downloads folder moved permanent location file management system. unzipped directory, navigate app.R file (purple arrow) open Rstudio.  app.R file open Rstudio click Run App button (white rounded rectangle arrow) app.R script tab launch Shiny app just like shiny::runGitHub(\"hatchR_shiny\", \"efelts-usfws\") . repository downloaded computer won’t need internet connection use app (accessed way). However, software updated repository need redownload repository local Shiny app reflect newly added changes.  Importantly, modify code app.R script Rstudio.","code":""},{"path":"https://bmait101.github.io/hatchR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bryan M. Maitland. Author, maintainer. Morgan M. Sparks. Author, copyright holder. Eli Felts. Contributor. Allison Swartz. Contributor. Paul Frater. Contributor.","code":""},{"path":"https://bmait101.github.io/hatchR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sparks M, Maitland B, Felts E, Swartz , Frater P (2025). “hatchR: toolset predict fish hatch emerge.” CRAN. doi:10.32614/CRAN.package.hatchR, https://github.com/bmait101/hatchR.","code":"@Article{,   title = {{hatchR}: A toolset to predict when fish hatch and emerge},   author = {Morgan M. Sparks and Bryan M. Maitland and Eli Felts and Allison Swartz and Paul Frater},   journal = {CRAN},   year = {2025},   doi = {10.32614/CRAN.package.hatchR},   url = {https://github.com/bmait101/hatchR}, }"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"hatchr-","dir":"","previous_headings":"","what":"Predict Fish Hatch and Emergence Timing","title":"Predict Fish Hatch and Emergence Timing","text":"Predict hatch emergence timing wild fish hatchR R package predicting hatch emergence timing wide range wild fishes using effective value framework (Sparks et al., (2019) DOI:10.1139/cjfas-2017-0468). hatchR offers users access established phenological models flexibility incorporate custom parameterizations using external datasets. package includes functions model selection, phenology prediction, visualization. hatchR designed user-friendly accessible wide range users, including researchers, managers, educators.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predict Fish Hatch and Emergence Timing","text":"Install released version hatchR CRAN: Install latest development version hatchR GitHub:","code":"install.packages(\"hatchR\") # install.packages(\"pak\") pak::pak(\"bmait101/hatchR\")"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"interactive-shiny-app","dir":"","previous_headings":"","what":"Interactive Shiny App","title":"Predict Fish Hatch and Emergence Timing","text":"can also use hatchR Shiny app interactively predict fish developmental phenology. run app, visit hatchR Shiny app.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"contributing-to-hatchr","dir":"","previous_headings":"","what":"Contributing to hatchR","title":"Predict Fish Hatch and Emergence Timing","text":"encourage users report bugs /contribute hatchR. detail , please see contributing guide (CONTRIBUTING.md).","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Predict Fish Hatch and Emergence Timing","text":"several ways get help hatchR: Open GitHub issue link . Post support website like Stack Overflow Cross Validated.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Predict Fish Hatch and Emergence Timing","text":"provide brief example showing use hatchR. thorough introduction software, see introductory vignette linked . list functions available hatchR, see function reference linked . First load hatchR helper packages running hatchR requires three primary data inputs: Water temperature data Species-specific model parameters Spawning date date ranges example woody_island dataset included hatchR contains temperature data Woody Island, Lake Iliamna, Alaska. includes daily water temperature data 1990-1992. can use plot_check_temp() visually check data. Spawning system typically peaks around August 18 hatching emergence done start following spawning season, can predict phenology within subset year. plot_check_temp() returns ggplot2 object, can add additional ggplot2 elements customize plots.  Next, select hatch emerge models want use predict phenology: Now can predict phenology sockeye salmon using predict_phenology() function: can check predicted phenology running: Finally, can visualize predicted phenology using plot_phenology():","code":"library(hatchR) library(ggplot2)  # for additional plotting options library(lubridate)  # for working with dates plot_check_temp(   data = woody_island,   dates = date,    temperature = temp_c   ) +  # additional ggplot2 elements below this `+`   geom_rect(     aes(       xmin = ymd(\"1990-08-18\"),  # spawn date       xmax = ymd(\"1991-04-01\"),  # approx phenology window end       ymin = -10,  # lower bound       ymax = 25),  # upper bound     fill = \"grey\",     alpha = 0.01     ) sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    development_type = \"hatch\"   ) WI_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod   ) # see days to hatch WI_hatch$days_to_develop #> [1] 74 # and development period WI_hatch$dev_period #>        start       stop #> 1 1990-08-18 1990-10-30 plot_phenology(WI_hatch)"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"imported-packages","dir":"","previous_headings":"","what":"Imported Packages","title":"Predict Fish Hatch and Emergence Timing","text":"hacthR imports following R packages: dplyr: data manipulation. ggplot2: vignette visualizations. lubridate: working dates. tibble: creating tibbles output various functions. rlang: .data usage. stats: various modeling functions (e.g., confint()). lifecycle: function lifecycle badges. utils: various utility functions.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"suggested-packages","dir":"","previous_headings":"","what":"Suggested Packages","title":"Predict Fish Hatch and Emergence Timing","text":"hatchR suggests following R packages: knitr: vignette building. readr: reading data. purrr: iteration vignettes. rmarkdown: vignette building. nycflights13: example data. tidyr: vignette building. stringr: vignette building. ggridges: vignette building. patchwork: vignette building. cli: better messages. testthat: unit testing.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Predict Fish Hatch and Emergence Timing","text":"project licensed GNU General Public License, GPL-3.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"usda-disclaimer","dir":"","previous_headings":"","what":"USDA Disclaimer","title":"Predict Fish Hatch and Emergence Timing","text":"hatchR project code provided “” basis user assumes responsibility use. USDA Forest Service relinquished control information longer responsibility protect integrity , confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring USDA Forest Service.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the dates in a data frame are continuous. — check_continuous","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"Check dates data frame continuous.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"","code":"check_continuous(data, dates)"},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"data data.frame, data frame extension (e.g. tibble). dates Column representing date temperature measurements.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"message indicating dates continuous breaks. breaks, vector row numbers breaks occur returned.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"","code":"library(hatchR) check_continuous(crooked_river, date) #> ℹ No breaks were found. All clear!"},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset: Crooked River, Idaho — crooked_river","title":"Example dataset: Crooked River, Idaho — crooked_river","text":"Daily stream temperature data Crooked River, tributary North Fork Boise River, Idaho.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset: Crooked River, Idaho — crooked_river","text":"","code":"crooked_river"},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset: Crooked River, Idaho — crooked_river","text":"Data frame columns date Date time measurement taken. temperture Temperature degrees Celsius.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset: Crooked River, Idaho — crooked_river","text":"Dan Isaak, US Forest Service Rocky Mountain Research Station.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dataset: Crooked River, Idaho — crooked_river","text":"","code":"crooked_river #> # A tibble: 1,826 × 2 #>    date                temp_c #>    <dttm>               <dbl> #>  1 2010-12-01 00:00:00   1.16 #>  2 2010-12-02 00:00:00   1.34 #>  3 2010-12-03 00:00:00   1.25 #>  4 2010-12-04 00:00:00   1.01 #>  5 2010-12-05 00:00:00   1.29 #>  6 2010-12-06 00:00:00   1.23 #>  7 2010-12-07 00:00:00   1.46 #>  8 2010-12-08 00:00:00   1.50 #>  9 2010-12-09 00:00:00   1.74 #> 10 2010-12-10 00:00:00   1.46 #> # ℹ 1,816 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit B&M model 2 to new data using stats::nls() — fit_model","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"Generate custom parameterized models predicting hatching emergence phenology.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"","code":"fit_model(temp, days, species = NULL, development_type = NULL)"},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"temp Numeric vector temperatures days Numeric vector days hatch emerge species Character string species name (e.g., \"sockeye\") development_type Character string development type: \"hatch\" \"emerge\"","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"List fit model object, model coefficients, model specifications data.frame, plot observations model fit.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"hatchR also includes functionality generate custom parameterized models predicting hatching emergence phenology. Importantly, custom parameterization relies model format developed model 2 Beacham Murray (1990), chose overall simplicity negligible loss accuracy. See Beacham Murray (1990) Sparks et al. (2019) specific discussion regarding model 2 development effective value approach.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"","code":"library(hatchR) # vector of temperatures temperature <- c(2, 5, 8, 11, 14) # vector of days to hatch days_to_hatch <- c(194, 87, 54, 35, 28) bt_hatch_mod <- fit_model(   temp = temperature,   days = days_to_hatch, species = \"sockeye\", development_type = \"hatch\" )"},{"path":"https://bmait101.github.io/hatchR/reference/hatchR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hatchR: Predict Fish Hatch and Emergence Timing — hatchR-package","title":"hatchR: Predict Fish Hatch and Emergence Timing — hatchR-package","text":"Predict hatch emergence timing wide range wild fishes using effective value framework (Sparks et al., (2019) doi:10.1139/cjfas-2017-0468 ). 'hatchR' offers users access established phenological models flexibility incorporate custom parameterizations using external datasets.","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/reference/hatchR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hatchR: Predict Fish Hatch and Emergence Timing — hatchR-package","text":"Maintainer: Bryan M. Maitland bryan.maitland@usda.gov (ORCID) Authors: Morgan M. Sparks morgan.sparks@usda.gov (ORCID) [copyright holder] contributors: Eli Felts eli_felts@fws.gov (ORCID) [contributor] Allison Swartz allison.swartz@oregonstate.edu [contributor] Paul Frater paul.frater@wisconsin.gov [contributor]","code":""},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":null,"dir":"Reference","previous_headings":"","what":"Central Idaho Water Temperature Data — idaho","title":"Central Idaho Water Temperature Data — idaho","text":"Water temperature data Isaak et al. (2018).  Generally covers Boise, Payette, Clearwater, upper Salmon River watersheds.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Central Idaho Water Temperature Data — idaho","text":"","code":"idaho"},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Central Idaho Water Temperature Data — idaho","text":"Data frame date Date measurement taken. site Site ID. temp_c Temperature degrees Celsius.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Central Idaho Water Temperature Data — idaho","text":"https://hess.copernicus.org/articles/22/6225/2018/","code":""},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Central Idaho Water Temperature Data — idaho","text":"Isaak, D.J., Luce, C.H., Chandler, G.L., Horan, D.L., Wollrab, S.P. (1990). Principal components thermal regimes mountain river networks. Hydrology Earth System Sciences, 22(12), 6225–6240.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/idaho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Central Idaho Water Temperature Data — idaho","text":"","code":"idaho #> # A tibble: 773,681 × 3 #>    date                site      temp_c #>    <dttm>              <chr>      <dbl> #>  1 2010-12-01 00:00:00 PIBO_1345   0.07 #>  2 2010-12-01 00:00:00 PIBO_1346   0.53 #>  3 2010-12-01 00:00:00 PIBO_1350   0.47 #>  4 2010-12-01 00:00:00 PIBO_1368   0.1  #>  5 2010-12-01 00:00:00 PIBO_1375   0.33 #>  6 2010-12-01 00:00:00 PIBO_1384   0.09 #>  7 2010-12-01 00:00:00 PIBO_1407   0.68 #>  8 2010-12-01 00:00:00 PIBO_1408   1.55 #>  9 2010-12-01 00:00:00 PIBO_1409   0.74 #> 10 2010-12-01 00:00:00 PIBO_1545   0.99 #> # ℹ 773,671 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a development model structure — model_select","title":"Select a development model structure — model_select","text":"function calls model table parameterizations different species different studies built . Refer table (model_table) using function find inputs different function arguments. pulls model format string parses usable hatchR model.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a development model structure — model_select","text":"","code":"model_select(author, species, model_id, development_type = \"hatch\")"},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a development model structure — model_select","text":"author Character string author name. species Character string species name. model_id Either model number Beacham Murray (1990) specific paper (e.g., Sparks et al. 2017 = AK). development_type phenology type. vector possible values \"hatch\" \"emerge\". default \"hatch\".","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a development model structure — model_select","text":"data.frame giving model specifications passed predict_phenology().","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a development model structure — model_select","text":"","code":"library(hatchR) # access the parameterization for sockeye hatching using # model #2 from Beacham and Murray (1990) sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model_id = 2,   development_type = \"hatch\" ) # print sockeye_hatch_mod #> # A tibble: 1 × 5 #>   author                  species model_id development_type expression           #>   <chr>                   <chr>   <chr>    <chr>            <chr>                #> 1 Beacham and Murray 1990 sockeye 2        hatch            1 /exp(6.727 - log(…"},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of phenology models — model_table","title":"Table of phenology models — model_table","text":"Table providing model parameterizations phenology models.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of phenology models — model_table","text":"","code":"model_table"},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of phenology models — model_table","text":"Data frame 5 columns: author Author-year short citation species Species name model_id Identification number model parameterization development_type Hatch emergence expression character string parameterized function expression","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of phenology models — model_table","text":"Beacham & Murray (1990), Sparks et al. (2017), Austin et al. (2019).","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Table of phenology models — model_table","text":"Beacham, T.D., Murray, C.B. (1990). Temperature, egg size, development embryos alevins five species Pacific salmon: comparative analysis. Canadian Journal Zoology, 68, 1931–1940. Sparks, M.M., Westley, P..H., Falke, J.., Quinn, T.. (2017). Thermal adaptation phenotypic plasticity warming world: Insights common garden experiments Alaskan sockeye salmon. Canadian Journal Fisheries Aquatic Sciences, 76(1), 123–135. Austin, C.C., Essington, T.E., Quinn, T.. (2019). Spawning emergence phenology bull trout Salvelinus confluentus differing thermal regimes. Canadian Journal Fisheries Aquatic Sciences, 94(1), 191–195.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of phenology models — model_table","text":"","code":"model_table #> # A tibble: 51 × 5 #>    author                  species  model_id development_type expression         #>    <chr>                   <chr>    <chr>    <chr>            <chr>              #>  1 Beacham and Murray 1990 sockeye  2        hatch            1 /exp(6.727 - lo… #>  2 Beacham and Murray 1990 sockeye  4        hatch            1/exp(8.734 + (-1… #>  3 Beacham and Murray 1990 sockeye  5        hatch            1/exp(9.848 + (-1… #>  4 Beacham and Murray 1990 sockeye  7        hatch            1/exp(5.379 + (-0… #>  5 Beacham and Murray 1990 sockeye  2        emerge           1 / exp(7.227 - l… #>  6 Beacham and Murray 1990 sockeye  4        emerge           1/exp(7.647 + (-1… #>  7 Beacham and Murray 1990 sockeye  5        emerge           1/exp(9.404 + (-1… #>  8 Beacham and Murray 1990 sockeye  7        emerge           1/exp(5.97 + (-0.… #>  9 Beacham and Murray 1990 pink odd 2        hatch            1 / exp(6.663 - l… #> 10 Beacham and Murray 1990 pink odd 4        hatch            1/exp(7.962 + (-1… #> # ℹ 41 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual check of imported temperature data — plot_check_temp","title":"Visual check of imported temperature data — plot_check_temp","text":"plot_check_temp function used plot imported data check temperature values. function takes data frame dates temperature values, plots temperature values time. function also allows users specify visual thresholds minimum maximum temperature values plotted.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual check of imported temperature data — plot_check_temp","text":"","code":"plot_check_temp(data, dates, temperature, temp_min = 0, temp_max = 25)"},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual check of imported temperature data — plot_check_temp","text":"data data.frame, data frame extension (e.g. tibble). dates Vector dates temperature measurements. Must date date-time class. temperature Vector temperature values. temp_min Threshold lower range expected temperature. Default 0. temp_max Threshold upper range expected temperature. Default 25.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual check of imported temperature data — plot_check_temp","text":"object class \"gg\" \"ggplot\" can printed console saved image.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual check of imported temperature data — plot_check_temp","text":"","code":"library(hatchR) plot_check_temp(   data = crooked_river,   dates = date,   temperature = temp_c )"},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize fish phenology — plot_phenology","title":"Visualize fish phenology — plot_phenology","text":"function takes output predict_phenology() creates basic ggplot2 plot object visualize predicted phenology.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize fish phenology — plot_phenology","text":"","code":"plot_phenology(plot, style = \"all\", labels = TRUE)"},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize fish phenology — plot_phenology","text":"plot list containing output predict_phenology() style style plot. vector possible values \"\", \"ef_cumsum\", \"ef_daily\". default \"\". labels Logical. TRUE (default), labels added plot.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize fish phenology — plot_phenology","text":"object class \"gg\" \"ggplot\".","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize fish phenology — plot_phenology","text":"displayed, scaled daily effective temperature (EF) values plot primary y-axis. Cumulative EF values plot secondary y-axis.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize fish phenology — plot_phenology","text":"","code":"library(hatchR) # get model parameterization sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   development_type = \"hatch\" ) # predict phenology sockeye_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod ) #> Warning: ! Fish developed, but negative temperature values resulted in NaNs after #>   development. #> ℹ Check date(s): 1991-08-12 #> ℹ Fish spawn date was: 1990-08-18 plot_phenology(sockeye_hatch)  plot_phenology(sockeye_hatch, style = \"ef_cumsum\")  plot_phenology(sockeye_hatch, style = \"ef_daily\")  plot_phenology(sockeye_hatch, labels = FALSE)"},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict phenology of fish — predict_phenology","title":"Predict phenology of fish — predict_phenology","text":"Predict phenology fish using effective value framework.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict phenology of fish — predict_phenology","text":"","code":"predict_phenology(data, dates, temperature, spawn.date, model)"},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict phenology of fish — predict_phenology","text":"data Data frame dates temperature. dates Date temperature measurements. temperature Temperature measurements. spawn.date Date spawning, given character string (e.g., \"1990-08-18\"). Must year-month-day format shown. model data.frame column named \"expression\" character vector giving model specifications. Can obtained using model_select() using data obtain model expression (see fit_model).","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict phenology of fish — predict_phenology","text":"list following elements: days_to_develop: numeric vector length 1; number predicted days hatch emerge. ef_table: n x 4 tibble (n = number days hatch emerge) dates, temperature, effective values, cumulative sum effective values. dev_period: 1x2 dataframe dates corresponding fish's parent spawned (input predict_phenology(spawn.date = ...)) date fish predicted hatch emerge. model_specs: data.frame model specifications.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict phenology of fish — predict_phenology","text":"Sparks, M.M., Falke, J.., Quinn, T.., Adkinson, M.D., Schindler, D.E. (2019). Influences spawning timing, water temperature, climatic warming early life history phenology western Alaska sockeye salmon. Canadian Journal Fisheries Aquatic Sciences, 76(1), 123–135.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict phenology of fish — predict_phenology","text":"","code":"library(hatchR) # get model parameterization sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model_id = 2,   development_type = \"hatch\" )  # predict phenology sockeye_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod ) #> Warning: ! Fish developed, but negative temperature values resulted in NaNs after #>   development. #> ℹ Check date(s): 1991-08-12 #> ℹ Fish spawn date was: 1990-08-18"},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict spawning of fish — predict_spawn","title":"Predict spawning of fish — predict_spawn","text":"Predict spawning fish using backwards calculation effective value framework.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict spawning of fish — predict_spawn","text":"","code":"predict_spawn(data, dates, temperature, develop.date, model)"},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict spawning of fish — predict_spawn","text":"data Data frame dates temperature. dates Date temperature measurements. temperature Temperature measurements. develop.date Date development (e.g., hatch emergence), given character string (e.g., \"1990-08-18\"). Must year-month-day format shown. model data.frame column named \"expression\" character vector giving model specifications. Can obtained using model_select() using data obtain model expression (see fit_model).","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict spawning of fish — predict_spawn","text":"list following elements: days_to_develop: numeric vector length 1; number predicted days hatch emerge. ef_table: n x 4 tibble (n = number days hatch emerge) dates, temperature, effective values, cumulative sum effective values. Presented descending order devlop.date backward. dev_period: 1x2 dataframe dates corresponding fish's parent spawned (input predict_phenology(spawn.date = ...)) date fish predicted hatch emerge. model_specs: data.frame model specifications.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict spawning of fish — predict_spawn","text":"Sparks, M.M., Falke, J.., Quinn, T.., Adkinson, M.D., Schindler, D.E. (2019). Influences spawning timing, water temperature, climatic warming early life history phenology western Alaska sockeye salmon. Canadian Journal Fisheries Aquatic Sciences, 76(1), 123–135.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_spawn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict spawning of fish — predict_spawn","text":"","code":"library(hatchR) # get emergence mod for bull trout bull_trout_emerge_mod <- model_select(author = \"Austin et al. 2019\",                                       species = \"bull trout\",                                       model = \"MM\",                                       development_type = \"emerge\" )  # predict spawn date using emergence date predict_spawn(data = crooked_river,               dates = date,               temperature = temp_c,               develop.date = \"2015-03-21\",               model = bull_trout_emerge_mod ) #> $days_to_develop #> [1] 188 #>  #> $dev_period #>        start       stop #> 1 2014-09-15 2015-03-21 #>  #> $ef_table #> # A tibble: 188 × 5 #>    index dates               temperature ef_vals ef_cumsum #>    <dbl> <dttm>                    <dbl>   <dbl>     <dbl> #>  1  1572 2015-03-21 00:00:00        2.25 0.00496     0.995 #>  2  1571 2015-03-20 00:00:00        1.97 0.00479     0.990 #>  3  1570 2015-03-19 00:00:00        1.78 0.00467     0.986 #>  4  1569 2015-03-18 00:00:00        2    0.00481     0.981 #>  5  1568 2015-03-17 00:00:00        2.02 0.00482     0.976 #>  6  1567 2015-03-16 00:00:00        2.06 0.00484     0.971 #>  7  1566 2015-03-15 00:00:00        1.97 0.00479     0.966 #>  8  1565 2015-03-14 00:00:00        1.93 0.00476     0.962 #>  9  1564 2015-03-13 00:00:00        1.64 0.00459     0.957 #> 10  1563 2015-03-12 00:00:00        1.79 0.00468     0.952 #> # ℹ 178 more rows #>  #> $model_specs #> # A tibble: 1 × 5 #>   author             species    model_id development_type expression             #>   <chr>              <chr>      <chr>    <chr>            <chr>                  #> 1 Austin et al. 2019 bull trout MM       emerge           1/exp(5.590 - (x  * 0… #>"},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize temperature data to daily values — summarize_temp","title":"Summarize temperature data to daily values — summarize_temp","text":"summarize_temp function used summarize sub-daily temperature measurements obtain mean daily temperature.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize temperature data to daily values — summarize_temp","text":"","code":"summarize_temp(data, dates, temperature)"},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize temperature data to daily values — summarize_temp","text":"data data.frame, data frame extension (e.g. tibble). dates Column representing date temperature measurements. temperature Column representing temperature values.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize temperature data to daily values — summarize_temp","text":"data.frame summarized daily temperature values.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize temperature data to daily values — summarize_temp","text":"","code":"library(hatchR) summarize_temp(   data = idaho,   dates = date,   temperature = temp_c ) #> # A tibble: 1,826 × 2 #>    date       daily_temp #>    <date>          <dbl> #>  1 2010-12-01      0.417 #>  2 2010-12-02      0.591 #>  3 2010-12-03      0.602 #>  4 2010-12-04      0.289 #>  5 2010-12-05      0.419 #>  6 2010-12-06      0.439 #>  7 2010-12-07      0.699 #>  8 2010-12-08      0.761 #>  9 2010-12-09      0.941 #> 10 2010-12-10      0.855 #> # ℹ 1,816 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"Temperature Data Woody Island Lake Iliamna, Alaska","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"","code":"woody_island"},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"Data frame columns: date Date measurement taken. temp_c Temperature degrees Celsius.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"Sparks et al. (2019)","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"Sparks, M.M., Falke, J.., Quinn, T.., Adkinson, M.D., Schindler, D.E., Bartz, K., Young, D., Westley, P..H. (2019). Influences spawning timing, water temperature, climatic warming early life history phenology western Alaska sockeye salmon. Canadian Journal Fisheries Aquatic Sciences, 76(1), 123–135.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dataset: Woody Island, Lake Iliamna, Alaska — woody_island","text":"","code":"woody_island #> # A tibble: 735 × 2 #>    date       temp_c #>    <date>      <dbl> #>  1 1990-08-11  25.8  #>  2 1990-08-12  23.3  #>  3 1990-08-13  18.5  #>  4 1990-08-14  15.4  #>  5 1990-08-15  14.0  #>  6 1990-08-16  11.4  #>  7 1990-08-17   9.19 #>  8 1990-08-18   9.84 #>  9 1990-08-19  10.6  #> 10 1990-08-20  10.7  #> # ℹ 725 more rows"},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"hatchr-development-version","dir":"Changelog","previous_headings":"","what":"hatchR (development version)","title":"hatchR (development version)","text":"fix test ggplot object class (#61) added Predict spawn vignette examples using predict_spawn() function added new function predict_spawn() take observed hatch spawn events back calculate parent spawned adding @pfrater @allisonswartz contributors (done v0.3.2) secondary y-axis plot_phenology() now “Cumulative EF Values” updated documentation (#43) added new vignette launching Shiny app (#45) changed name element dev.period dev_period predict_phenology() output; updated name throughout (#50)","code":""},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"hatchr-032","dir":"Changelog","previous_headings":"","what":"hatchR 0.3.2","title":"hatchR 0.3.2","text":"CRAN release: 2025-03-05","code":""},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"hatchR 0.3.2","text":"omitted “+ file LICENSE” DESCRIPTION file ommited email address README","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"hatchR 0.3.1","text":"added missing dependency R >= 4.1.0 package code uses pipe syntax added R 4.1.0","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"hatchR 0.3.0","text":"fix model_table bug (#11) add link Shiny app (#12); (PR #13) added axis labels make output plot fit_model() intuitive added second axis plot_phenology() fix citations model_table throughout (#11) added minimum versions dependencies (#16)","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"hatchR 0.2.0","text":"model_select predict_phenology tweaks (#1) fix predict_phenology NaN problem (#3) fix Isaak data (#5) function cleaning (#6) adding unit tests (#7)","code":""},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"hatchr-010","dir":"Changelog","previous_headings":"","what":"hatchR 0.1.0","title":"hatchR 0.1.0","text":"Initial package version.","code":""}]
