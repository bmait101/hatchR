[{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hatchR development","title":"Contributing to hatchR development","text":"outlines propose change hatchR. two main approaches: Create GitHub issue identifying bug suggesting feature. Contribute code change via GitHub pull request. prefer use GitHub, please send email bryan.maitland@usda.gov.","code":""},{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":"github-issue","dir":"","previous_headings":"","what":"GitHub Issue","title":"Contributing to hatchR development","text":"may create GitHub issue identifying bug suggesting feature. may access hatchR’s GitHub issues webpage visiting https://github.com/bmait101/hatchR/issues. Please illustrate bug feature using minimal reproducible example, reprex, linked . See tidyverse guide create great issue linked advice.","code":""},{"path":"https://bmait101.github.io/hatchR/CONTRIBUTING.html","id":"github-pull-request","dir":"","previous_headings":"","what":"GitHub Pull Request","title":"Contributing to hatchR development","text":"contribute change hatchR, please use pull request. learn creating GitHub pull request, please see GitHub guide linked .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bmait101.github.io/hatchR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Advanced plotting","text":"goal vignette provide examples might access results predict_phenology() might plot data.","code":"library(hatchR) library(purrr) library(tidyr) library(dplyr) library(ggplot2) library(lubridate) library(stringr) library(ggridges) library(patchwork)"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A simple example","title":"Advanced plotting","text":"’ll return first example Woody Island show might present data single spawning season. First let’s get results output plotting format. Now ’ll make plot temperature rectangles show duration hatch emergence periods. can add labels days hatch emergence change labels legend.","code":"# run map to get a vector of models WI_mods <- map(c(\"hatch\", \"emerge\"),   model_select,   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2 ) |>   unlist()  # make vector of spawn dates WI_spawn_dates <- c(\"1990-08-14\", \"1990-08-18\", \"1990-09-3\")  # make variables grid WI_var_grid <- expand_grid(model = WI_mods, spawn.date = WI_spawn_dates)  # run pmap for all variable combinations WI_results <- pmap(WI_var_grid,   predict_phenology,   data = woody_island, # additional arguments required by function   dates = date,   temperature = temp_c )  # Now that we have our model results, lets put them in a tibble for plotting WI_dev.period <- WI_results |>   map_df(\"dev.period\") |>   tibble() |>   mutate(     phenology = c(rep(\"hatch\", 3), rep(\"emerge\", 3)), # add a phenology column     days = as.numeric(stop - start), # column of the number of days (same as days2done)     index = c(1:3, 5:7)   ) # index for plotting later plot1 <- ggplot() +   geom_rect(data = WI_dev.period, aes(     xmin = start, xmax = stop,     ymin = 10 - index, ymax = 10.5 - index, # use index to vertically place rects     fill = phenology   )) +   geom_point(data = woody_island, aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(data = woody_island, aes(x = date, y = temp_c)) +   lims(     x = c(min(WI_dev.period$start), max(WI_dev.period$stop) + days(30)), # borrow min and max from dev.period to add day buffers to set limits     y = c(-1, 16)   ) +   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\")) + # custom colors   theme_classic() +   theme(legend.position.inside = c(0.75, 0.75))  plot1 plot1 +   geom_label(     data = WI_dev.period,     aes(       x = start + (stop - start) / 1.25, # find middle of phenology and multiply by number to place proportionally on line       y = (10.25 - index), label = days     )   ) + # place label halfway down bar   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) + # this would replae scale_fill_manual in your orginal figure   labs(fill = \"Phenology\", y = \"Temperature (C)\")"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"plotting-multiple-years","dir":"Articles","previous_headings":"","what":"Plotting multiple years","title":"Advanced plotting","text":"Let’s use Crooked River data number continuous years data without temperature anomalies. ’ll now make similar plot use facet_wrap() break plots apart year. cutting make developmental year phenology spans two calendar years. result, cut Aug. 1 one year Aug. 1 subsequent year (August 1 instead Sept. 1 match plot limits ’re setting ) make developmental year (year adult spawned). can facet_wrap() break years plot. can see, allows us put figures X scale despite flowing multiple years. ’ll figure right way cut data (find similar alternative options). solves primary problem plotting phenology multiple years, results span multiple years may start stop intervals multiple years (particularly fall spawning species).","code":"# spawn dates spawn_dates <- map(   c(2011:2014), # year vector to map for custom function   function(year) { # custom paste function     c(       paste0(year, \"-09-01\"),       paste0(year, \"-09-20\"),       paste0(year, \"-09-30\")     )   } ) |> # pipe to unlist() to make a vector   unlist()  # mods dev_mods <- map(c(\"hatch\", \"emerge\"),   model_select,   author = \"Austin et al. 2017\",   species = \"bull trout\",   model = \"MM\" )  # variable grid var_grid <- expand_grid(model = dev_mods, spawn.date = spawn_dates)   ### mutliple input mapping  crooked_predictions <- pmap(var_grid, # combos of variables to iterate over   predict_phenology, # function   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c )  # make duration dataframe CR_dev.period <- crooked_predictions |>   map_df(\"dev.period\") |>   tibble() |>   mutate(     phenology = c(rep(\"hatch\", 12), rep(\"emerge\", 12)), # add a phenology column     days = as.numeric(stop - start), # column of the number of days (same as days2done)     year = year(start), # new column for just year (to facet wrap with)     index = c(rep(1:3, 4), rep(5:7, 4))   ) |> # new index because we're making 4 independent graphs   na.omit() |>   filter(year >= 2011) # remove the 2010 year ### add a column called year (in this case the developmental year) cut_ints <- ymd(   c(     \"2010-08-01\", \"2011-08-01\", \"2012-08-01\",     \"2013-08-01\", \"2014-08-01\",     \"2015-08-01\", \"2016-08-01\"   ),   tz = \"UTC\" )  # cut acording to our cut intervals and label by developmental year crooked_river_sy <- crooked_river |>   mutate(year = cut(date,     breaks = cut_ints,     labels = c(2010:2015)   )) |>   mutate(year = as.numeric(as.character(year))) |> # cut coerces our labels to factors, this changes them back to numbers   filter(year > 2010 & year < 2015) # remove 2010 and 2015  # make plot (facet_wrap by development year) ggplot() +   geom_rect(data = CR_dev.period, aes(     xmin = start, xmax = stop, # draw bars     ymin = 10 - index, ymax = 10.5 - index, # use index to vertically place rects     fill = phenology   )) +   geom_point(data = crooked_river_sy, aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(data = crooked_river_sy, aes(x = date, y = temp_c)) +   lims(x = c(min(CR_dev.period$start) - days(30), max(CR_dev.period$stop) + days(30))) + # set limits   scale_x_datetime(date_labels = \"%b\") + # change X label to month   facet_wrap(~year, ncol = 1, scales = \"free_x\") + # facet wrap here subset plots on developmental year   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) + # custom colors   labs(fill = \"Phenology\", x = \"Date\", y = \"Temperature (C)\") +   theme_classic()"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"plotting-multiple-individual-spawning-events","dir":"Articles","previous_headings":"","what":"Plotting multiple individual spawning events","title":"Advanced plotting","text":"Another common plotting scenario might data number fish spawn single multiple seasons want represent results. can show hypothetical scenario bull trout example . scenario, let’s assume 300 spawning adults spawn roughly normal distribution mean Sept. 15 standard deviation 5 days (makes Sept. 1st 30th 3 sd mean). Now can map hatch emergence timing across vector dates created two years. Notice chosen two fairly thermally different years quite different developmental phenology estimates (see plot Plotting multiple years). Also, ’re going take short cut mapping don’t store results date (1200 total, 600 developmental period estimated) memory. instead, pipe |> pmap() map_dbl(\"dev.period\") command left phenology estimates data otherwise outputted. plot, let’s briefly walk . First made predictions output start stop data map_df(\"dev.period\") command. Next added Phenology column appropriate phenology type determined structure spawn_grid object. made similar object spawning combined mapping ouput bull_trout_all_phenology. reason plot distributions spawning, hatching, emergence across years. can see also need cut like add developmental year use geom_blank() custom limits set everything scale. can see, even small differences thermal regime can make big differences developmental phenology. even combine plot plot made previously show regime duration along side distributions. combining plots highly recommend patchwork package. many ways can plot data meant serve templates /guides around common issues related plotting phenology data.","code":"# draw from a normal distribution with above parameters set.seed(322) # allows us to draw same random sample every time for the example fish_dist <- round(rnorm(300,   mean = 15,   sd = 5 ), 0) # summary summary(fish_dist)  # change 0s to 1s fish_dist[which(fish_dist == 0)] <- 1  # look at distribution hist(fish_dist)  # make a vector of fish dates and add mo_day to combine with fish_dist fish_dates <- tibble(date = seq(ymd(\"2014-09-01\"), ymd(\"2014-09-30\"), by = \"days\")) |>   mutate(mo_day = mday(date))  # loop for repping (could do with map, too) fish_dates_norm <- NULL for (d in fish_dates$mo_day) {   day <- fish_dates$date[d] # get date    spawners <- fish_dist[fish_dist == d] # vector of spawners in fish_dist    spawners_date <- rep(day, times = length(spawners)) # make vector of date repeated the lenght of the vector spawners    fish_dates_norm <- append(fish_dates_norm, spawners_date) # append to out file }  head(fish_dates_norm)  # now let's make the same vector for 2013 so we can compare two years fish_dates_13 <- fish_dates_norm |>   str_replace_all(\"2014\", \"2013\") # replace all the 2014s with 2013 using string replace  # add the two together in a vector and sort fish_dates_all <- sort(append(fish_dates_norm, fish_dates_13))  # looks good! head(fish_dates_all) tail(fish_dates_all)  # remember these all need to be in a character string for predict_phenology()! fish_dates_str <- format(fish_dates_all, \"%Y-%m-%d\") # make variable grid for pmap (we use dev_mods from previous example) spawn_grid <- expand_grid(model = dev_mods, spawn.date = fish_dates_str)  bull_trout_dist <- pmap(spawn_grid,   predict_phenology,   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c ) |> # pipe!   map_df(\"dev.period\") # just output dev.period  ### now let's add the key columns for plotting  # first you can see the output and the spawn grid have the same number of rows so # we can borrow the format from the spawn grid length(bull_trout_dist) dim(spawn_grid)  # moreover from the grid, you can see that it predicts hatch for all the dates first # and then predicts emergence head(spawn_grid$model) tail(spawn_grid$model)  # now we can borrow all that information to make the exact data object we want bull_trout_dist_phenology <- bull_trout_dist |>   mutate(     Date = stop, # rename stop to Date     Phenology = c(rep(\"Hatch\", 600), rep(\"Emerge\", 600))   ) |> # make phenology column   select(Date:Phenology) # select date and phenology columns to put in object  # make a similar object with spawning data (notice we name the columns the exact same) bull_trout_spawn_phenology <- tibble(Date = fish_dates_all) |>   mutate(Phenology = \"Spawn\")  # combine spawn and hatch/emerge objects for a final plotting object bull_trout_all_phenology <- bind_rows(   bull_trout_spawn_phenology,   bull_trout_dist_phenology ) |>   mutate(y = year(Date)) |>   na.omit()  head(bull_trout_all_phenology) tail(bull_trout_all_phenology) # before we plot, because we are again plotting across years we need to cut up our data # still need 2012 and 2015 because phenology will leak over cut_ints_1314 <- ymd(c(   \"2012-08-01\", \"2013-08-01\",   \"2014-08-01\", \"2015-08-01\" ), tz = \"UTC\")  # cut acording to our cut intervals and label by developmental year bull_trout_phenology_cut <- bull_trout_all_phenology |>   mutate(year = cut(Date,     breaks = cut_ints_1314,     labels = c(2012:2014)   )) |>   mutate(year = as.numeric(as.character(year))) |>   na.omit()    # look to see max development days to make custom lims bull_trout_dist |>   mutate(phen_days = stop - start) |>   slice_max(phen_days) # output max value  # make custom lims using 30 days before first spawn and 244 days max (214 + 30) from above # makes a 30 day buffer cust_lims <- tibble(min = c(ymd(c(\"2013-08-01\", \"2014-08-01\"), tz = \"UTC\"))) |>   mutate(max = min + days(244)) |>   pivot_longer(everything(), names_to = \"type\", values_to = \"Date\") |>   mutate(year = c(2013, 2013, 2014, 2014))   # make plot ggplot() +   geom_blank(data = cust_lims, aes(x = Date)) + # we use geom_blank to keep everything on the same limits from our custom lims object   geom_density_ridges(     data = bull_trout_phenology_cut,     aes(x = Date, y = Phenology, color = Phenology, fill = Phenology),     jittered_points = TRUE,     position = position_points_jitter(width = 0.05, height = 0),     point_shape = \"|\", point_size = 2, point_alpha = 1, alpha = 0.7   ) +   lims(x = c(min(cust_lims$Date) - days(1), max(cust_lims$Date) + days(1))) +   scale_x_datetime(date_labels = \"%b\") +   scale_fill_brewer(palette = \"Dark2\") +   scale_color_brewer(palette = \"Dark2\") +   facet_wrap(~year, ncol = 1, scales = \"free_x\") +   theme_classic() +   theme(legend.position = \"none\") # same plot as before but we'll filter the years to 2013 and 2014  CR_dev.period_1314 <- CR_dev.period |> filter(year %in% c(2013, 2014)) crooked_river_sy_1314 <- crooked_river_sy |> filter(year %in% c(2013, 2014))  # name plot as object p1 p1 <- ggplot() +   geom_rect(data = CR_dev.period_1314, aes(     xmin = start, xmax = stop, # draw bars     ymin = 10 - index, ymax = 10.5 - index, # use index to vertically place rects     fill = phenology   )) +   geom_point(data = crooked_river_sy_1314, aes(x = date, y = temp_c), size = 0.25, ) +   geom_line(data = crooked_river_sy_1314, aes(x = date, y = temp_c)) +   lims(x = c(min(CR_dev.period$start) - days(30), max(CR_dev.period$stop) + days(30))) + # set limits   scale_x_datetime(date_labels = \"%b\") + # change X label to month   facet_wrap(~year, ncol = 1, scales = \"free_x\") + # facet wrap here subset plots on developmental year   scale_fill_manual(values = c(\"navyblue\", \"dodgerblue\"), labels = c(\"Emerge\", \"Hatch\")) + # custom colors   labs(fill = \"Phenology\", x = \"Date\", y = \"Temperature (C)\") +   theme_classic()  # name distribution plot as object p2  p2 <- ggplot() +   geom_blank(data = cust_lims, aes(x = Date)) + # we use geom_blank to keep everything on the same limits from our custom lims object   geom_density_ridges(     data = bull_trout_phenology_cut,     aes(x = Date, y = Phenology, color = Phenology, fill = Phenology),     jittered_points = TRUE,     position = position_points_jitter(width = 0.05, height = 0),     point_shape = \"|\", point_size = 2, point_alpha = 1, alpha = 0.7   ) +   lims(x = c(min(cust_lims$Date) - days(1), max(cust_lims$Date) + days(1))) +   scale_x_datetime(date_labels = \"%b\") +   scale_fill_brewer(palette = \"Dark2\") +   scale_color_brewer(palette = \"Dark2\") +   facet_wrap(~year, ncol = 1, scales = \"free_x\") +   theme_classic() +   theme(legend.position = \"none\")  ### patchwork plot  # plot the two plots side by side using + operator, you can stack with / operator p1 + p2"},{"path":"https://bmait101.github.io/hatchR/articles/Advanced_plotting.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Advanced plotting","text":":::::::","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"hatchR R package designed allow users leverage daily water temperature records predict fish expected hatch /emerge using statistical models, well additional tools aid analyses. Specifically, hatchR intended bridge analytic gap taking statistical models developed hatchery settings (e.g., Beacham Murray 1990) applying real world temperature data sets using effective value framework developed Sparks et al. (2019). vignette describes input data requirements, recommendations importing data, basic data checks, overview downstream steps hatchR workflow covered vignettes. load hatchR running","code":"library(hatchR)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"input-data","dir":"Articles","previous_headings":"Overview","what":"Input Data","title":"Introduction","text":"Water temperature datasets found wild often either (1) already summarized day (.e., mean daily temperature) , 2) raw format something like HOBO TidbiT readings taken multiple times per day, can summarized mean daily temperatures. Alternatively, new statistical models like Siegel et al. (2023) similarly implemented. Fundamentally, hatchR assumes input data two columns: date column, giving date (often time) temperature measurement, temperature column, giving associated temperature measurement (centigrade). columns okay include, two columns (column name—just without spaces) required. expect data look something like : hatchR assumes ’ve checked missing records errors data can function gaps, ’s important go data checks discussed , well sanity checks. hatchR can use values freezing (e.g, 0 °C), returns extremely small effective values, time hatch emerge may > 1 year. cases, suggest users consider much data type reasonable data.","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"prerequisites-dates-and-times","dir":"Articles","previous_headings":"Overview > Input Data","what":"Prerequisites: Dates and Times","title":"Introduction","text":"Numeric temperature values simple work R, dates time can tricky. provide brief overview work dates times R, refer user Chapter 17 R Data Science (Wickham, Çetinkaya-Rundel, Grolemund 2023) -depth discussion. recommend using lubridate package, makes easier work dates times R, ensure dates correct format. lubridate comes installed hatchR, can loaded : three types date/time data refer instant time: date, Tibbles print <date> time within day, Tibbles print <time> date-time date plus time, Tibbles print <dttm>. Base R calls POSIXct, ’s helpful name. can use today() now() lubridate get current date date-time: context hatchR, ways likely create date/time : reading file R readr::read_csv() string (e.g., data read R read.csv()) individual components (year, month, day, hour, minute, second)","code":"library(lubridate) today() #> [1] \"2024-12-03\" now() #> [1] \"2024-12-03 20:44:07 UTC\""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"reading-in-dates","dir":"Articles","previous_headings":"Overview > Input Data > Prerequisites: Dates and Times","what":"Reading in dates","title":"Introduction","text":"reading CSV file readr::read_csv(), readr (also comes installed hatchR) automatically parse (recognize) dates date-times form “YYYY-MM-DD” “YYYY-MM-DD HH:MM:SS”. ISO8601 date (<date>) date-time (<dttm>) formats, respectively. ISO8601 international standard writing dates components date organized biggest smallest separated -. example reading CSV file dates form “YYYY-MM-DD” “YYYY-MM-DD HH:MM:SS”: dates different format, ’ll need use col_types plus col_date() col_datetime() along standard date-time format (see Table 17.1 R4DS list date format options).","code":"library(readr) csv <- \"   date,datetime   2022-01-02,2022-01-02 05:12 \" read_csv(csv) #> # A tibble: 1 × 2 #>   date       datetime            #>   <date>     <dttm>              #> 1 2022-01-02 2022-01-02 05:12:00"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"from-strings","dir":"Articles","previous_headings":"Overview > Input Data > Prerequisites: Dates and Times","what":"From strings","title":"Introduction","text":"read CSV file using read.csv() base R, date columns formatted characters (<char>; e.g., \"2000-09-01\" \"2000-09-01 12:00:00\"). convert column <date> <dttm>. lubridate’s helpers attempt automatically determine format specify order component. use , identify order year, month, day appear dates, arrange “y”, “m”, “d” order. gives name lubridate function parse date. date-time, add underscore one “h”, “m”, “s” name parsing function.","code":"ymd(\"2017-01-31\") #> [1] \"2017-01-31\" mdy(\"January 31st, 2017\") #> [1] \"2017-01-31\" dmy(\"31-Jan-2017\") #> [1] \"2017-01-31\" ymd_hms(\"2017-01-31 20:11:59\") #> [1] \"2017-01-31 20:11:59 UTC\" mdy_hm(\"01/31/2017 08:01\") #> [1] \"2017-01-31 08:01:00 UTC\""},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"from-individual-components","dir":"Articles","previous_headings":"Overview > Input Data > Prerequisites: Dates and Times","what":"From individual components","title":"Introduction","text":"Sometimes components date separate columns. can use make_date() make_datetime() combine date date-time. show , ’ll use flights dataset comes nycflights13, installed alongside hatchR dependencies = TRUE install.packages(). also make use helper functions dplyr select mutate columns.","code":"library(nycflights13) library(dplyr)  flights |>    select(year, month, day, hour, minute) #> # A tibble: 336,776 × 5 #>     year month   day  hour minute #>    <int> <int> <int> <dbl>  <dbl> #>  1  2013     1     1     5     15 #>  2  2013     1     1     5     29 #>  3  2013     1     1     5     40 #>  4  2013     1     1     5     45 #>  5  2013     1     1     6      0 #>  6  2013     1     1     5     58 #>  7  2013     1     1     6      0 #>  8  2013     1     1     6      0 #>  9  2013     1     1     6      0 #> 10  2013     1     1     6      0 #> # ℹ 336,766 more rows  flights |>    select(year, month, day) |>   mutate(date = make_date(year, month, day)) #> # A tibble: 336,776 × 4 #>     year month   day date       #>    <int> <int> <int> <date>     #>  1  2013     1     1 2013-01-01 #>  2  2013     1     1 2013-01-01 #>  3  2013     1     1 2013-01-01 #>  4  2013     1     1 2013-01-01 #>  5  2013     1     1 2013-01-01 #>  6  2013     1     1 2013-01-01 #>  7  2013     1     1 2013-01-01 #>  8  2013     1     1 2013-01-01 #>  9  2013     1     1 2013-01-01 #> 10  2013     1     1 2013-01-01 #> # ℹ 336,766 more rows  flights |>    select(year, month, day, hour, minute) |>    mutate(departure = make_datetime(year, month, day, hour, minute)) #> # A tibble: 336,776 × 6 #>     year month   day  hour minute departure           #>    <int> <int> <int> <dbl>  <dbl> <dttm>              #>  1  2013     1     1     5     15 2013-01-01 05:15:00 #>  2  2013     1     1     5     29 2013-01-01 05:29:00 #>  3  2013     1     1     5     40 2013-01-01 05:40:00 #>  4  2013     1     1     5     45 2013-01-01 05:45:00 #>  5  2013     1     1     6      0 2013-01-01 06:00:00 #>  6  2013     1     1     5     58 2013-01-01 05:58:00 #>  7  2013     1     1     6      0 2013-01-01 06:00:00 #>  8  2013     1     1     6      0 2013-01-01 06:00:00 #>  9  2013     1     1     6      0 2013-01-01 06:00:00 #> 10  2013     1     1     6      0 2013-01-01 06:00:00 #> # ℹ 336,766 more rows"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"importing-your-data","dir":"Articles","previous_headings":"","what":"Importing your data","title":"Introduction","text":"hatchR uses daily water temperature records predict fish developmental phenology, enforce (<date>) class date fields. also convenient ggplot2 handles <date> (<dttm>) vector classes well without significant need change visualizations data model outputs. vignettes, use two datasets come installed package: crooked_river woody_island. dataset available user R objects hatchR installed attached (see ?crooked_river ?woody_island information). raw example data (.csv files) stored extdata/ directory installed alongside hatchR. may store file paths example data:","code":"path_cr <- system.file(\"extdata/crooked_river.csv\", package = \"hatchR\") path_wi <- system.file(\"extdata/woody_island.csv\", package = \"hatchR\")"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"using-readrread_csv","dir":"Articles","previous_headings":"Importing your data","what":"Using readr::read_csv()","title":"Introduction","text":"noted prerequisite section, recommend loading data R using readr::read_csv(). can load readr using: specifying path_* (using system.file()), load example dataset R: check crooked_river dataset running either str() tibble::glimpse() see structure data. glimpse() little like str() applied data frame, tries show much data possible. prefer tibble::glimpse() compact easier read. tibble also comes installed hatchR. Now can check structure crooked_river dataset: data, assuming .csv file data folder working directory called your_data.csv, call:","code":"crooked_river <- read_csv(path_cr) woody_island <- read_csv(path_wi) library(tibble)  glimpse(crooked_river) #> Rows: 3,367 #> Columns: 2 #> $ date   <dttm> 2011-09-09, 2011-09-10, 2011-09-11, 2011-09-12, 2011-09-13, 20… #> $ temp_c <dbl> 7.57, 7.39, 7.19, 7.24, 7.59, 7.68, 7.51, 7.41, 6.19, 6.65, 6.7… glimpse(woody_island) #> Rows: 739 #> Columns: 2 #> $ date   <chr> \"8/11/1990\", \"8/12/1990\", \"8/13/1990\", \"8/14/1990\", \"8/15/1990\"… #> $ temp_c <dbl> 25.850000, 23.308333, 18.533333, 15.350000, 13.966667, 11.35833… library(readr) library(tibble) your_data <- read_csv(\"data/your_data.csv\") glimpse(your_data)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"using-read-csv","dir":"Articles","previous_headings":"Importing your data","what":"Using read.csv()","title":"Introduction","text":"import data functions like read.csv() read.table(), date columns formatted characters (<chr>). convert column <date> <dttm> type, recommend using `lubridate`, makes dealing date litter easier. example might :","code":"crooked_river <- read.csv(path_cr) woody_island <- read.csv(path_wi)  str(crooked_river) # note date column is imported as a character (<chr>) #> 'data.frame':    3367 obs. of  2 variables: #>  $ date  : chr  \"2011-09-09T00:00:00Z\" \"2011-09-10T00:00:00Z\" \"2011-09-11T00:00:00Z\" \"2011-09-12T00:00:00Z\" ... #>  $ temp_c: num  7.57 7.39 7.19 7.24 7.59 7.68 7.51 7.41 6.19 6.65 ... str(woody_island) # note date column is imported as a character (<chr>) #> 'data.frame':    739 obs. of  2 variables: #>  $ date  : chr  \"8/11/1990\" \"8/12/1990\" \"8/13/1990\" \"8/14/1990\" ... #>  $ temp_c: num  25.9 23.3 18.5 15.3 14 ...  # convert using lubridate functions ------  # if your date is in the form \"2000-09-01 12:00:00\" crooked_river$date <- ymd_hms(crooked_river$date)  # if your date is in the form \"2000-09-01\" woody_island$date <- mdy(woody_island$date)   # check glimpse(crooked_river) #> Rows: 3,367 #> Columns: 2 #> $ date   <dttm> 2011-09-09, 2011-09-10, 2011-09-11, 2011-09-12, 2011-09-13, 20… #> $ temp_c <dbl> 7.57, 7.39, 7.19, 7.24, 7.59, 7.68, 7.51, 7.41, 6.19, 6.65, 6.7… glimpse(woody_island) #> Rows: 739 #> Columns: 2 #> $ date   <date> 1990-08-11, 1990-08-12, 1990-08-13, 1990-08-14, 1990-08-15, 19… #> $ temp_c <dbl> 25.850000, 23.308333, 18.533333, 15.350000, 13.966667, 11.35833…"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"data-checks","dir":"Articles","previous_headings":"","what":"Data Checks","title":"Introduction","text":"discussed section data import, first step importing data check structure data. recommend using glimpse() .","code":"glimpse(crooked_river) #> Rows: 3,367 #> Columns: 2 #> $ date   <dttm> 2011-09-09, 2011-09-10, 2011-09-11, 2011-09-12, 2011-09-13, 20… #> $ temp_c <dbl> 7.57, 7.39, 7.19, 7.24, 7.59, 7.68, 7.51, 7.41, 6.19, 6.65, 6.7…"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"vizualize-your-data","dir":"Articles","previous_headings":"Data Checks","what":"Vizualize your data","title":"Introduction","text":"Next, best practice visualize data ensure imported correctly. hatchR focuses use ggplot2 data visualization installed alongside hatchR. aid users, hatchR comes wrapper function plot_check_temp() visualize imported data verify nothing strange happened import process. arguments temp_min = temp_max = can used custom set thresholds expected temperature ranges (defaults set 0 25 C). example using built-dataset crooked_river:  can replicate plot using ggplot:","code":"plot_check_temp(data = crooked_river,                  dates = date,                  temperature = temp_c,                  temp_min = 0,                  temp_max = 12) library(ggplot2)  crooked_river |>     ggplot(aes(x = date, y =  temp_c)) +     geom_point(size = 0.5) +     geom_line(linewidth = 0.5) +     geom_hline(       yintercept = 0, linetype = \"dashed\", color = \"dodgerblue\"     ) +     geom_hline(       yintercept = 12, linetype = \"dashed\", color = \"red\"     ) +     labs(title = \"Temperature Check\", x = \"Date\", y = \"Temperature\") +     theme_classic()"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"summarize-data","dir":"Articles","previous_headings":"Data Checks","what":"Summarize Data","title":"Introduction","text":"imported raw data multiple recordings per day, hatchR built function summarize data daily average mean called summarize_temp(). output function tibble mean daily temperature corresponding day. recommend, minimum, visually checking data summarized.","code":"# create date object for a year with 30 min temperature measurement intervals dates <- seq(   from = ymd_hms(\"2000-01-01 00:00:00\"),   to = ymd_hms(\"2000-12-31 23:59:59\"),    length.out = 17568   )   # create empty dataframe temp.test <- data.frame(matrix(NA, nrow = length(dates), ncol = 1))  colnames(temp.test)[1] <- \"date\" # date column  # add dates vector to date columns temp.test[1] <- dates   set.seed(123)  # simulate temps from a random normal dist with mean 10 sd 3 for every date time combo in dates and append to column (temp) in temp.test temp.test$temp <- rnorm(n = length(dates), mean = 10, sd = 3) |> abs()   glimpse(temp.test) # info about temp.test #> Rows: 17,568 #> Columns: 2 #> $ date <dttm> 2000-01-01 00:00:00, 2000-01-01 00:30:00, 2000-01-01 01:00:00, 2… #> $ temp <dbl> 8.318573, 9.309468, 14.676125, 10.211525, 10.387863, 15.145195, 1…  # check how many rows in raw data nrow(temp.test) #17568 records #> [1] 17568  # summarized data temp.test_sum <- summarize_temp(data = temp.test,                                 temperature = temp,                                 dates = date)  nrow(temp.test_sum) #365 records #> [1] 366 # note we are now using crooked_river_sum instead of crooked_river plot_check_temp(data = temp.test_sum,                  dates = date,                  temperature = daily_temp,                  temp_min = 5,                 temp_max = 15)"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"check-for-continuous-data","dir":"Articles","previous_headings":"Data Checks","what":"Check for continuous data","title":"Introduction","text":"present, hatchR uses continuous data. Therefore, data expected continuous complete. can check whether data complete continuous using check_continuous() function. function return message data continuous complete. days missing data, impute using rolling means approaches.","code":"check_continuous(data = crooked_river, dates = date) #> [1]  376  732 1473 1542"},{"path":"https://bmait101.github.io/hatchR/articles/Introduction.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Introduction","text":"importing, checking, wrangling data, number different actions can take. demonstrate full workflow hatchR, recreate part analysis Sparks et al. (2019) use data Woody Island Lake Iliamna, Alaska (see Predict Phenology Basic Predict Phenology Advanced vignettes). However, generalized workflow hatchR demonstrated .","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Parameterize hatchR Models","text":"vignette describes process parameterizing models predicting fish phenology using hatchR. package provides two options choosing phenological models. One use model parameterizations installed package create using data import. cover options vignette. First, load hatchR:","code":"library(hatchR)"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"built-in-parameterizations","dir":"Articles","previous_headings":"","what":"Built-in parameterizations","title":"Parameterize hatchR Models","text":"simplest way get started use built-parameterizations, included model_table. table includes parameterizations several salmonid species relating temperature hatch emergence timing, can selected using model_select(). Let get sense table, comes installed hatchR: see model_table tbble 51 rows 5 columns: author: author(s) year publication model species: species model parameterized model: model number (specific Beacham Murray (1990) created several models) dev.type: phenological development type (.e., hatch emerge) func: model expression / parameterization use author, species, model, dev.type select model functions. instance, wanted access parameterization sockeye hatching using model #2 Beacham Murray (1990) run: Note, arguments equivalent first line four columns model_table. model function object—case sockeye_hatch_mod—can passed predict_phenology(), demonstrate Predicting Phenology vignettes. see available characterizations use:","code":"model_table #> # A tibble: 51 × 5 #>    author                  species  model dev.type func                          #>    <chr>                   <chr>    <chr> <chr>    <chr>                         #>  1 Beacham and Murray 1990 sockeye  2     hatch    1 /exp(6.727 - log(x + 2.394… #>  2 Beacham and Murray 1990 sockeye  4     hatch    1/exp(8.734 + (-1.589*log(x … #>  3 Beacham and Murray 1990 sockeye  5     hatch    1/exp(9.848 + (-1.583*log(x … #>  4 Beacham and Murray 1990 sockeye  7     hatch    1/exp(5.379 + (-0.076*log(x)… #>  5 Beacham and Murray 1990 sockeye  2     emerge   1 / exp(7.227 - log(x + 2.56… #>  6 Beacham and Murray 1990 sockeye  4     emerge   1/exp(7.647 + (-1.134*log(x … #>  7 Beacham and Murray 1990 sockeye  5     emerge   1/exp(9.404 + (-1.169*log(x … #>  8 Beacham and Murray 1990 sockeye  7     emerge   1/exp(5.97 + (-0.276*log(x))… #>  9 Beacham and Murray 1990 pink odd 2     hatch    1 / exp(6.663 - log(x + 2.55… #> 10 Beacham and Murray 1990 pink odd 4     hatch    1/exp(7.962 + (-1.382*log(x … #> # ℹ 41 more rows sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    dev.type = \"hatch\"   )  #print out the expression to check sockeye_hatch_mod #> # A tibble: 1 × 5 #>   author                  species model dev.type func                           #>   <chr>                   <chr>   <chr> <chr>    <chr>                          #> 1 Beacham and Murray 1990 sockeye 2     hatch    1 /exp(6.727 - log(x + 2.394)) View(model_table)"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"creating-custom-models","dir":"Articles","previous_headings":"","what":"Creating custom models","title":"Parameterize hatchR Models","text":"hatchR also includes functionality generate custom model parameterizations predicting hatching emergence phenology. Importantly, custom parameterization relies model format developed model 2 Beacham Murray (1990), chose overall simplicity negligible loss accuracy. See Beacham Murray (1990) Sparks et al. (2019) specific discussion regarding model 2 development effective value approach. model follows general format : EffectiveValuei=1/exp(logea−loge(Temperaturei−b)) Effective Value_i = 1/exp(log_ea - log_e(Temperature_i - b)) daily value fish hatches emerges cumulative sum ∑=1nEffectiveValuei=1\\sum_{=1}^nEffectiveValue_i = 1 function fit_model() uses data average incubation temperature (°C) days phenological event inputs parameterizes model logea b. , example, borrow data Table 8.1 (pg. 183) Quinn (2018), can generate custom hatch parameterization brown trout. either create .csv file data import readr::read_csv() alternatively, directly input object R. ’ll use tibble() create data, installed hatchR loaded using: can now create data object: can plot data sanity check using ggplot2. First load package: Now plot data:  can now use fit_model() create custom parameterization data. output fit_model() list numerous elements, including full model, coefficients logea b, expression pass predict_phenology(), plot see fit data, diagnostic variables. can see full extent using can inspect plot predicted versus observed data, looks good.  vast majority time, want actual expression pass predict_phenology() model = ... argument function, can either pass directly $ operator calling $mod element list (e.g., model = bt_hatch_mod$mod)) set object pass. Like ","code":"library(tibble) # vector of temperatures temperature <- c(2,5,8,11,14)  #vector of days to hatch days_to_hatch <- c(194,87,54,35,28)  #make a tibble of the two vectors quinn_bt_hatch <- tibble(temperature, days_to_hatch) quinn_bt_hatch #> # A tibble: 5 × 2 #>   temperature days_to_hatch #>         <dbl>         <dbl> #> 1           2           194 #> 2           5            87 #> 3           8            54 #> 4          11            35 #> 5          14            28 library(ggplot2) ggplot(quinn_bt_hatch, aes(x = temperature, y = days_to_hatch)) +   geom_point() +   theme_classic() # brown trout hatch mod bt_hatch_mod <- fit_model(df = quinn_bt_hatch,                            temp = temperature,                            days = days_to_hatch,                            species = \"bull_trout\",                            dev.type = \"hatch\") bt_hatch_mod bt_hatch_mod$pred_plot # creae an object with the model expression to pass to predict_phenology() bt_hatch_exp <- bt_hatch_mod$func"},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"important-considerations-for-your-custom-models","dir":"Articles","previous_headings":"Creating custom models","what":"Important considerations for your custom models","title":"Parameterize hatchR Models","text":"model fits good data generated . important considerations: recommend minimum four temperature x hatch/emerge data points. Data spread across temperatures much possible. ’s much better fit derived data temperatures 3, 7, 10, 14 °C 8, 9, 10, 11 °C. behavior model function around tails cold warm temperatures (relative fish species) drive fit function, extreme temperatures helpful. Think hard whether data generating parameterization match data trying predict extrapolating beyond sensible model. Understand response variable, models fit 50% hatch emergence family group population. However, data may different interpret results accordingly (e.g. comparisons 50% hatch population 95% hatch population B may reasonable).","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Parameterize_models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Parameterize hatchR Models","text":":::::::","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: advanced","text":"function predict_phenolgy() purposefully kept fairly simple can expanded automate across datasets. Typically, take form loops vectorizing R (functions map() apply() families). many reasons might want automate ability predict including predicting multiple years, multiple sites, predicting hatch emergence, even using multiple potential spawn dates. ’ll show examples (moving less complicated). First, load packages:","code":"library(hatchR) # for data and phenology modeling library(ggplot2) # for additional plotting options library(purrr) # for vectorizing library(tibble) # for data manipulation library(dplyr) # for data manipulation library(lubridate)  # for date manipulation library(tidyr)  # for data manipulation"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"multiple-spawn-dates","dir":"Articles","previous_headings":"","what":"Multiple spawn dates","title":"Predict fish phenology: advanced","text":"Given example used Predict Phenology-Basic vignette, perhaps now want expand predict multiple spawn dates (e.g., early, peak, late part spawning distribution) Woody Island population Lake Iliamna. Using Table 1 Sparks et al. (2019) see spawning range August 14 September 3rd, peak occurring August 18th. can set dates vector run model . go typical process getting model parameterized previously. Now can automate model. ’ll demonstrate two ways—loop vectorized approach.","code":"WI_spawn_dates <- c(\"1990-08-14\", \"1990-08-18\", \"1990-09-3\") sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   dev.type = \"hatch\" )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"looping","dir":"Articles","previous_headings":"Multiple spawn dates","what":"Looping","title":"Predict fish phenology: advanced","text":"show example set loop run element woody_island dataset. don’t want full output run predict_phenolgy() just example want predicted days hatch, ’s easier access elements within loop demonstrated temp object section demonstrated loop.","code":"### Loop storage objects OUT_loop_all <- NULL # empty object to store output in OUT_loop_d2h <- NULL # empty object for days to hatch ( if we just wanted to output these data)  ### Loop body for (d in 1:length(WI_spawn_dates)) { # d will be our numerical iterator    WI_spawn <- WI_spawn_dates[d] # subset the element d of the vector and assign to object    # predict phenology   WI_hatch <- predict_phenology(     data = woody_island,     dates = date,     temperature = temp_c,     spawn.date = WI_spawn,     model = sockeye_hatch_mod   )    ### ALL output ###    # do this if we want to maintain all info predict_phenology   OUT_loop_all[[d]] <- WI_hatch # store list into the dth list element of the OUT_loop object    ### A single element of output ###    # alternatively, if you know you just want something like days to hatch you can access   # that part of the list and just store it as object    temp <- tibble(matrix(data = NA, ncol = 2, nrow = 1)) # empty dataframe to add in data    colnames(temp) <- c(\"spawn_date\", \"days_2_hatch\") # change column names    temp$spawn_date <- WI_spawn # assign spawn date   temp$days_2_hatch <- WI_hatch$days2done # assign days to hathc    OUT_loop_d2h <- rbind(OUT_loop_d2h, temp) # row bind temp object and OUT object }  ### Loop output (note: we iteratively add to the NULL objects we make at the beginning)  # you can see OUT_loop is a list of lists with three lists each with four elements # (i.e., the four outputs of predict_phenology()) glimpse(OUT_loop_all) #> List of 3 #>  $ :List of 5 #>   ..$ days2done  : int 71 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef.vals    : num [1:71] 0.0213 0.0196 0.0165 0.0139 0.0147 ... #>   ..$ ef.tibble  : spc_tbl_ [71 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 74 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef.vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>   ..$ ef.tibble  : spc_tbl_ [74 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 110 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef.vals    : num [1:110] 0.0163 0.0165 0.0165 0.0165 0.0165 ... #>   ..$ ef.tibble  : spc_tbl_ [110 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  # you can also see we made a tibble of dates and predicted days to hatch OUT_loop_d2h #> # A tibble: 3 × 2 #>   spawn_date days_2_hatch #>   <chr>             <int> #> 1 1990-08-14           71 #> 2 1990-08-18           74 #> 3 1990-09-3           110"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"vectorizing","dir":"Articles","previous_headings":"Multiple spawn dates","what":"Vectorizing","title":"Predict fish phenology: advanced","text":"Mapping: Vectorizing, historically prioritizing speed, now making code readable (see sections r4ds Advanced R). ’ll demonstrate using map() purrr package. unfamiliar mapping want learn works ’s power, highly recommend linked chapters R Data Science (Grolemund Garrett (n.d.)) Advanced R (“9 Functionals | Advanced r” (n.d.)) shown . Apply: tidyverse associated packages become quite popular world R, base functionality R long set functions similar things map. called apply family. hatchR built using much functionality tidyverse opt using map() apply functions, however demonstrate similar workflow using apply family.","code":"# map works by applying a function over a list (our vector is a very simple list) # if you are familiar with apply() functions, map is essentially the same  results_map <- map(   WI_spawn_dates, # vector we are mapping over   predict_phenology, # function we are mapping with (note no \"()\"),   data = woody_island, # additional arguments required by predict_phenology   dates = date,   temperature = temp_c,   model = sockeye_hatch_mod )  # we now have a list of lists the same as OUT_loop glimpse(results_map) #> List of 3 #>  $ :List of 5 #>   ..$ days2done  : int 71 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef.vals    : num [1:71] 0.0213 0.0196 0.0165 0.0139 0.0147 ... #>   ..$ ef.tibble  : spc_tbl_ [71 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 74 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef.vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>   ..$ ef.tibble  : spc_tbl_ [74 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 110 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef.vals    : num [1:110] 0.0163 0.0165 0.0165 0.0165 0.0165 ... #>   ..$ ef.tibble  : spc_tbl_ [110 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  # we can then access days to hatch easily as such results_map |>   map_dbl(\"days2done\") #> [1]  71  74 110 # lapply() is the equivalent function as map() in the apply family # they both output lists  results_lapply <- lapply(WI_spawn_dates, # vector we are mapping over   predict_phenology, # function we are mapping with (note no \"()\"),   data = woody_island, # additional arguments required by predict phenology   dates = date,   temperature = temp_c,   model = sockeye_hatch_mod )  # you can see that lapply and map output the same results glimpse(results_lapply) #> List of 3 #>  $ :List of 5 #>   ..$ days2done  : int 71 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef.vals    : num [1:71] 0.0213 0.0196 0.0165 0.0139 0.0147 ... #>   ..$ ef.tibble  : spc_tbl_ [71 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 74 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef.vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>   ..$ ef.tibble  : spc_tbl_ [74 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 110 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef.vals    : num [1:110] 0.0163 0.0165 0.0165 0.0165 0.0165 ... #>   ..$ ef.tibble  : spc_tbl_ [110 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"iterating-over-multiple-variables","dir":"Articles","previous_headings":"","what":"Iterating over multiple variables","title":"Predict fish phenology: advanced","text":"obvious extension example use sites multiple years data predict hatch emergence. example Predict Phenology-Basic vignette, saw days logger appeared water, let’s use cleaner dataset. example use temperature Crooked River, tributary Boise River Idaho, USA, reach known bull trout spawning. dataset included crooked_river.  see 5 full years data use. sake exercise, let’s assume bull trout spawning system starts September 1st, peaks September 15th, mostly done September 30th. Remember, data starts just barely 2010, spawning years 2011-2015. However may enough days record make predictions 2015 best check first. First let’s just check see fish spawning 2015 enough data hatch emerge. See receive warning “Fish develop, accrue enough effective units. Spawn date =2015-09-15. fish spawn close end data?” tells us spawn date used can reference date isn’t working use string multiple dates predict . fish aren’t hatching definitely going emerge, won’t use 2015.","code":"# look at data structure glimpse(crooked_river) #> Rows: 1,826 #> Columns: 2 #> $ date   <dttm> 2010-12-01, 2010-12-02, 2010-12-03, 2010-12-04, 2010-12-05, 20… #> $ temp_c <dbl> 1.1638020, 1.3442852, 1.2533443, 1.0068728, 1.2899153, 1.229158…  # visually check data plot_check_temp(   data = crooked_river,   dates = date,   temperature = temp_c,   temp_min = 0,   temp_max = 12 ) # we can use some functions from tidyverse to do a datacheck # this shows the number of observations per year crooked_river |>   mutate(year = year(date)) |> # add a column converting the date to year   group_by(year) |>   tally() # count observations/year #> # A tibble: 6 × 2 #>    year     n #>   <dbl> <int> #> 1  2010    31 #> 2  2011   365 #> 3  2012   366 #> 4  2013   365 #> 5  2014   365 #> 6  2015   334 ### set up our bull trout hatch and emergence models bull_hatch_mod <- model_select(   author = \"Austin et al. 2017\",   species = \"bull trout\",   model = \"MM\",   dev.type = \"hatch\" )  bull_emerge_mod <- model_select(   author = \"Austin et al. 2017\",   species = \"bull trout\",   model = \"MM\",   dev.type = \"emerge\" )  # models are different bull_hatch_mod #> # A tibble: 1 × 5 #>   author             species    model dev.type func                       #>   <chr>              <chr>      <chr> <chr>    <chr>                      #> 1 Austin et al. 2017 bull trout MM    hatch    1/exp(5.086 - (x * 0.131)) bull_emerge_mod #> # A tibble: 1 × 5 #>   author             species    model dev.type func                        #>   <chr>              <chr>      <chr> <chr>    <chr>                       #> 1 Austin et al. 2017 bull trout MM    emerge   1/exp(5.590 - (x  * 0.126))  ### check 2015 dates  dates_2015 <- c(\"2015-09-01\", \"2015-09-15\", \"2015-09-30\")  ## hatch first hatch_2015 <- map(dates_2015,   predict_phenology,   data = crooked_river,   dates = date,   temperature = temp_c,   model = bull_hatch_mod )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"looping-1","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Looping","title":"Predict fish phenology: advanced","text":"build nested loop automate model selection variables dates. order applying predict_phenology() function loop example follows: Predict hatch 2011 spawn dates … 2014 spawn dates Predict emergence 2011 spawn dates … 2014 spawn dates output loop list lists. time 24 lists comprise elements predict_phenology() iteration. Simply, loop selects hatch model, runs every date vector (spawn_dates) switches emerge model thing. point iterator () can make new list addition every combination dev_mod (hatch emerge) 12 dates want run—resulting 24 total individual lists appended list lists walk iteration loop. sounds bit complicated, ’s . vectorized approaches really shine. quick note accessing lists. Even want write loops instead vectorizing, recommend accessing results via vectorized approach. ’s hard pull lot information large nested loops. probably write custom loop . However, results easily accessed map, like : code outputs ef.tibble element every one lists combination spawn date phenology type dataframe like object can easily plotted. Notice, now use map_df() know list element accessing format dataframe type object (tibble).","code":"## mini loop to make vector of dates spawn_dates <- NULL for (year in 2011:2014) {   temp_dates <- c(paste0(year, \"-09-01\"), paste0(year, \"-09-15\"), paste0(year, \"-09-30\"))   spawn_dates <- c(spawn_dates, temp_dates) } spawn_dates #>  [1] \"2011-09-01\" \"2011-09-15\" \"2011-09-30\" \"2012-09-01\" \"2012-09-15\" #>  [6] \"2012-09-30\" \"2013-09-01\" \"2013-09-15\" \"2013-09-30\" \"2014-09-01\" #> [11] \"2014-09-15\" \"2014-09-30\"  ### loop for prediction OUT <- NULL i <- 1 # build a counter for adding to our list of lists (OUT)  for (mod in c(\"hatch\", \"emerge\")) { # loop for hatch and emerge    # here we just iterate model selection over the two hatch and emerge options   # in the first for loop   dev_mod <- model_select(     author = \"Austin et al. 2017\",     species = \"bull trout\",     model = \"MM\",     dev.type = mod   )    for (d in 1:length(spawn_dates)) { # nested loop over spawn dates      # here we iterate over every date of spawn_dates but run this loop twice,     # once for each value of the first for loop      spawn <- spawn_dates[d] # get spawn date      temp <- predict_phenology(       data = crooked_river,       dates = date,       temperature = temp_c,       spawn.date = spawn,       model = dev_mod     ) # notice we are calling the mod we set in the fist loop      OUT[[i]] <- temp      i <- i + 1 # add to your counter   } }  # look at results glimpse(OUT) #> List of 24 #>  $ :List of 5 #>   ..$ days2done  : int 88 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2011-11-27\" #>   ..$ ef.vals    : num [1:88] 0.0148 0.0144 0.0144 0.0148 0.0152 ... #>   ..$ ef.tibble  : spc_tbl_ [88 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 106 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2011-12-29\" #>   ..$ ef.vals    : num [1:106] 0.0165 0.0163 0.0139 0.0148 0.015 ... #>   ..$ ef.tibble  : spc_tbl_ [106 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 124 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-01-31\" #>   ..$ ef.vals    : num [1:124] 0.0152 0.0158 0.0153 0.0151 0.0149 ... #>   ..$ ef.tibble  : spc_tbl_ [124 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 89 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-11-28\" #>   ..$ ef.vals    : num [1:89] 0.0183 0.0158 0.0156 0.0158 0.0159 ... #>   ..$ ef.tibble  : spc_tbl_ [89 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 104 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-12-27\" #>   ..$ ef.vals    : num [1:104] 0.015 0.0153 0.0146 0.0144 0.0146 ... #>   ..$ ef.tibble  : spc_tbl_ [104 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 122 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2013-01-29\" #>   ..$ ef.vals    : num [1:122] 0.0143 0.0139 0.0136 0.0115 0.0102 ... #>   ..$ ef.tibble  : spc_tbl_ [122 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 83 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2013-11-22\" #>   ..$ ef.vals    : num [1:83] 0.0203 0.0212 0.021 0.0217 0.0222 ... #>   ..$ ef.tibble  : spc_tbl_ [83 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 109 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-01-01\" #>   ..$ ef.vals    : num [1:109] 0.0202 0.02 0.0182 0.0159 0.0139 ... #>   ..$ ef.tibble  : spc_tbl_ [109 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 126 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-02-02\" #>   ..$ ef.vals    : num [1:126] 0.013 0.0119 0.0115 0.0108 0.0102 ... #>   ..$ ef.tibble  : spc_tbl_ [126 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 83 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-11-22\" #>   ..$ ef.vals    : num [1:83] 0.0153 0.0155 0.015 0.0136 0.0141 ... #>   ..$ ef.tibble  : spc_tbl_ [83 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 94 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-12-17\" #>   ..$ ef.vals    : num [1:94] 0.0149 0.017 0.017 0.0168 0.0159 ... #>   ..$ ef.tibble  : spc_tbl_ [94 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 114 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2015-01-21\" #>   ..$ ef.vals    : num [1:114] 0.0142 0.0123 0.012 0.0119 0.0125 ... #>   ..$ ef.tibble  : spc_tbl_ [114 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 187 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-03-05\" #>   ..$ ef.vals    : num [1:187] 0.00863 0.00842 0.00843 0.00864 0.00889 ... #>   ..$ ef.tibble  : spc_tbl_ [187 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 202 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-04-03\" #>   ..$ ef.vals    : num [1:202] 0.00962 0.0095 0.00815 0.00863 0.00874 ... #>   ..$ ef.tibble  : spc_tbl_ [202 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 215 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2011-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2012-05-01\" #>   ..$ ef.vals    : num [1:215] 0.00889 0.00921 0.00894 0.00882 0.00869 ... #>   ..$ ef.tibble  : spc_tbl_ [215 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 187 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2013-03-06\" #>   ..$ ef.vals    : num [1:187] 0.0106 0.00918 0.00909 0.00923 0.00929 ... #>   ..$ ef.tibble  : spc_tbl_ [187 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 203 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2013-04-05\" #>   ..$ ef.vals    : num [1:203] 0.00878 0.00892 0.00855 0.00844 0.00856 ... #>   ..$ ef.tibble  : spc_tbl_ [203 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 217 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2012-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2013-05-04\" #>   ..$ ef.vals    : num [1:217] 0.00836 0.00817 0.00796 0.0068 0.00607 ... #>   ..$ ef.tibble  : spc_tbl_ [217 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 181 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-02-28\" #>   ..$ ef.vals    : num [1:181] 0.0117 0.0122 0.0121 0.0125 0.0128 ... #>   ..$ ef.tibble  : spc_tbl_ [181 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 204 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-04-06\" #>   ..$ ef.vals    : num [1:204] 0.01165 0.01158 0.01055 0.00926 0.00815 ... #>   ..$ ef.tibble  : spc_tbl_ [204 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 216 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2013-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2014-05-03\" #>   ..$ ef.vals    : num [1:216] 0.00766 0.00704 0.0068 0.00638 0.00606 ... #>   ..$ ef.tibble  : spc_tbl_ [216 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 175 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-01\" #>   .. ..$ stop : POSIXct[1:1], format: \"2015-02-22\" #>   ..$ ef.vals    : num [1:175] 0.00892 0.00906 0.00874 0.00799 0.00826 ... #>   ..$ ef.tibble  : spc_tbl_ [175 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 188 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-15\" #>   .. ..$ stop : POSIXct[1:1], format: \"2015-03-21\" #>   ..$ ef.vals    : num [1:188] 0.00869 0.00987 0.0099 0.00978 0.00925 ... #>   ..$ ef.tibble  : spc_tbl_ [188 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ :List of 5 #>   ..$ days2done  : int 204 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: POSIXct[1:1], format: \"2014-09-30\" #>   .. ..$ stop : POSIXct[1:1], format: \"2015-04-21\" #>   ..$ ef.vals    : num [1:204] 0.00829 0.00721 0.00706 0.00702 0.00733 ... #>   ..$ ef.tibble  : spc_tbl_ [204 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr> mapped_results <- OUT |>   map_df(\"ef.tibble\")"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"vectorizing-1","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Vectorizing","title":"Predict fish phenology: advanced","text":"’ll use purrr function pmap() vectorize multiple-input map function. Let’s set iterative variables. ’ll workflow past example now exclusively mapping. Now ’ve demonstrated loops mapping get iterating multiple variables, let’s verify results match.","code":"# slightly cleaner spawn dates with map output is a list of vectors spawn_dates <- map(   c(2011:2014), # year vector to map for custom function   function(year) { # custom paste function     c(       paste0(year, \"-09-01\"),       paste0(year, \"-09-15\"),       paste0(year, \"-09-30\")     )   } ) |> # pipe to unlist() to make a vector   unlist()  dev_mods <- map(c(\"hatch\", \"emerge\"),   model_select,   author = \"Austin et al. 2017\",   species = \"bull trout\",   model = \"MM\" )  # we then set up a variable grid for all combinations of our models and dates # it is very important to make the names of the columns in var_grid to match the # arguments of the predict_phenology function (e.i., model = and spawn.date =)  var_grid <- expand_grid(model = dev_mods, spawn.date = spawn_dates) head(var_grid) #> # A tibble: 6 × 2 #>   model              spawn.date #>   <list>             <chr>      #> 1 <spc_tbl_ [1 × 5]> 2011-09-01 #> 2 <spc_tbl_ [1 × 5]> 2011-09-15 #> 3 <spc_tbl_ [1 × 5]> 2011-09-30 #> 4 <spc_tbl_ [1 × 5]> 2012-09-01 #> 5 <spc_tbl_ [1 × 5]> 2012-09-15 #> 6 <spc_tbl_ [1 × 5]> 2012-09-30  ### mutliple input mapping  crooked_predictions <- pmap(var_grid, # combos of variables to iterate over   predict_phenology, # function   data = crooked_river, # additional arguments required by function   dates = date,   temperature = temp_c ) # loop predictions preds_loop <- OUT |> map_dbl(\"days2done\") preds_pmap <- crooked_predictions |> map_dbl(\"days2done\")  # everything matches! preds_loop == preds_pmap #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"getting-usable-output","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Getting usable output","title":"Predict fish phenology: advanced","text":"basic output iterative processes big lists lists, can little annoying access data. However, different flavors map can friend. ’ve already shown examples access predictions, predict_phenology() outputs much data just point estimates. First ’ll demonstrate example can take prediction use create object ’s useful plotting. make plot original data:  best looking plot, good example translate output visual representation. better looking plots, please see Plotting data vignette. data types might want might include tibble dates, temperature, values cumulative sums effective values , alternatively, developmental period.","code":"# get predictions days <- crooked_predictions |>   map_dbl(\"days2done\")  # make a vector of what type of phenology we were predicting # remember we ran hatch over 15 spawn dates then emerge over thos same 15 phenology <- c(rep(\"hatch\", 12), rep(\"emerge\", 12))  # make a vector of our spawn dates replicated twice and turn into a timepoint spawning <- rep(spawn_dates, 2) |>   ymd(tz = \"UTC\") # we do this because the crooked_river dataset is ymd_hms  # put them all together in an object bull_trout_phenology <- tibble(phenology, spawning, days) head(bull_trout_phenology) #> # A tibble: 6 × 3 #>   phenology spawning             days #>   <chr>     <dttm>              <dbl> #> 1 hatch     2011-09-01 00:00:00    88 #> 2 hatch     2011-09-15 00:00:00   106 #> 3 hatch     2011-09-30 00:00:00   124 #> 4 hatch     2012-09-01 00:00:00    89 #> 5 hatch     2012-09-15 00:00:00   104 #> 6 hatch     2012-09-30 00:00:00   122 # filter crooked_river to correct size crooked_river_11_15 <- crooked_river |> filter(date < ymd_hms(\"2015-06-01 00:00:00\"))  ggplot(data = crooked_river_11_15, aes(x = date, y = temp_c)) +   geom_point(size = 0.25) +   geom_line() +   geom_point(     data = bull_trout_phenology,     aes(x = spawning, y = 10), color = \"darkblue\", shape = 25, size = 2.5   ) +   geom_point(     data = bull_trout_phenology |> filter(phenology == \"hatch\"),     aes(x = spawning + days(days), y = 0),     color = \"darkgreen\", shape = 24, size = 2.5   ) +   geom_point(     data = bull_trout_phenology |> filter(phenology == \"emerge\"),     aes(x = spawning + days(days), y = 0),     color = \"darkorange\", shape = 24, size = 2.5   ) +   labs(     title = \"Crooked River Bull Trout Developmental Phenology\",     subtitle = \"Blue = Spawn, Green = Hatch, Orange = Emerge\",     x = \"Date\",     y = \"Temperature\"   ) +   theme_classic() # the tibble with all temperature and effective values for each phenological period all_data <- crooked_predictions |>   map_df(\"ef.tibble\") head(all_data) #> # A tibble: 6 × 4 #>   dates               temperature ef_vals ef_cumsum #>   <dttm>                    <dbl>   <dbl>     <dbl> #> 1 2011-09-01 00:00:00        6.65  0.0148    0.0148 #> 2 2011-09-02 00:00:00        6.45  0.0144    0.0292 #> 3 2011-09-03 00:00:00        6.46  0.0144    0.0436 #> 4 2011-09-04 00:00:00        6.66  0.0148    0.0584 #> 5 2011-09-05 00:00:00        6.88  0.0152    0.0736 #> 6 2011-09-06 00:00:00        7.18  0.0158    0.0894  # the phenological durations for each prediction set development_period <- crooked_predictions |>   map_df(\"dev.period\") head(development_period) #>        start       stop #> 1 2011-09-01 2011-11-27 #> 2 2011-09-15 2011-12-29 #> 3 2011-09-30 2012-01-31 #> 4 2012-09-01 2012-11-28 #> 5 2012-09-15 2012-12-27 #> 6 2012-09-30 2013-01-29"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"naming-your-lists","dir":"Articles","previous_headings":"Iterating over multiple variables","what":"Naming your lists","title":"Predict fish phenology: advanced","text":"problem approach end large lists lists without labels require remember data structure feed mapping function. However, purrr method get around set_names() function pipe mapping function. approach works well example , well examples pmap() variable grid create bunch expressions don’t work naming lists. However, pmap() example site x dates combination, still work name lists according site date used predict phenology (e.g. named_list$site1$`date`$dev.period)","code":"# to use the simple Iliamna Lake example within a single season  WI_named_list <- WI_spawn_dates |>   set_names() |>   map(predict_phenology, # note we leave out the input row (WI_spawn_dates) because we are piping it in as input     data = woody_island, # additional arguments required by predict phenology     dates = date,     temperature = temp_c,     model = sockeye_hatch_mod   )  # you can now see each list is named according to its respective spawn date glimpse(WI_named_list) #> List of 3 #>  $ 1990-08-14:List of 5 #>   ..$ days2done  : int 71 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-14\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-23\" #>   ..$ ef.vals    : num [1:71] 0.0213 0.0196 0.0165 0.0139 0.0147 ... #>   ..$ ef.tibble  : spc_tbl_ [71 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ 1990-08-18:List of 5 #>   ..$ days2done  : int 74 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-08-18\" #>   .. ..$ stop : Date[1:1], format: \"1990-10-30\" #>   ..$ ef.vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>   ..$ ef.tibble  : spc_tbl_ [74 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>  $ 1990-09-3 :List of 5 #>   ..$ days2done  : int 110 #>   ..$ dev.period :'data.frame':  1 obs. of  2 variables: #>   .. ..$ start: Date[1:1], format: \"1990-09-03\" #>   .. ..$ stop : Date[1:1], format: \"1990-12-21\" #>   ..$ ef.vals    : num [1:110] 0.0163 0.0165 0.0165 0.0165 0.0165 ... #>   ..$ ef.tibble  : spc_tbl_ [110 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  #>   ..$ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"spec\")=List of 3 #>   .. .. ..- attr(*, \"class\")= chr \"col_spec\" #>   .. ..- attr(*, \"problems\")=<externalptr>  # therefore a single elemet could be accessed with its name and the $ operator # if we wanted the dev.period for fish spawning on August 18th we would do the following  WI_named_list$`1990-08-18`$dev.period #>        start       stop #> 1 1990-08-18 1990-10-30"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_advanced.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Predict fish phenology: advanced","text":":::::::","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: basic","text":"Now ’ve checked pre-processed data, know select model parameterizations, ’re ready predict developmental phenology fish species ’re interested . demonstrate full workflow hatchR, recreate part analysis Sparks et al. (2019) use data Woody Island Lake Iliamna, Alaska. data comes installed package called woody_island. First, load packages:","code":"library(hatchR)  # for data and phenology modeling library(ggplot2)  # for additional plotting options library(lubridate)  # for date manipulation library(tibble)  # for data manipulation"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"data-checks","dir":"Articles","previous_headings":"","what":"Data checks","title":"Predict fish phenology: basic","text":"First, let’s check data make sure ’s right format. ’ll use head() print first rows summary() get sense data: can see day already summarized mean temperature. can also see data spans multiple years. ’ll use plot_check_temp() make visually check data:  appear outliers data, specifically beginning end period record, right middle. loggers look recording observations outside water middle water level may dropped exposed air. However, spawning system typically peaks around August 18 hatching emergence done start following spawning season, can predict phenology within subset year. Becuase plot_check_temp() ggplot object, can add geoms plot represent approximate phenology window:  just apply model within green polygon ’ve drawn, model work just fine.","code":"# print data head(woody_island) #> # A tibble: 6 × 2 #>   date       temp_c #>   <date>      <dbl> #> 1 1990-08-11   25.8 #> 2 1990-08-12   23.3 #> 3 1990-08-13   18.5 #> 4 1990-08-14   15.4 #> 5 1990-08-15   14.0 #> 6 1990-08-16   11.4  #summarize data summary(woody_island) #>       date                temp_c       #>  Min.   :1990-08-11   Min.   :-9.900   #>  1st Qu.:1991-02-10   1st Qu.: 1.733   #>  Median :1991-08-13   Median : 4.442   #>  Mean   :1991-08-13   Mean   : 5.272   #>  3rd Qu.:1992-02-12   3rd Qu.: 7.767   #>  Max.   :1992-08-14   Max.   :28.700   #>  NA's   :4            NA's   :4 plot_check_temp(   data = woody_island,   dates = date,    temperature = temp_c   ) p <- plot_check_temp(   data = woody_island,   dates = date,    temperature = temp_c   ) +    labs(title = \"Temperature data from Woody Island, Lake Iliamna, Alaska\")  p +    geom_rect(     aes(       xmin = ymd(\"1990-08-18\"),  # spawn date       xmax = ymd(\"1991-04-01\"),  # approx phenology window end       ymin = -10,  # lower bound       ymax = 25),  # upper bound     fill = \"darkgreen\",  # color rectangle dark green     alpha = 0.01  # make rectangle semi-transparent     )"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"model-select","dir":"Articles","previous_headings":"","what":"Model select","title":"Predict fish phenology: basic","text":"Now temperature data usable can select models. ’ll predict hatching emergence, obtain model expression using model_select(). argument model_select() must changed case dev.type, can either “hatch” “emerge”. Let’s look expressions two different models ’ve selected: can see parameterized slightly differently account differences hatch emergence timing.","code":"sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    dev.type = \"hatch\"   )  sockeye_emerge_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    dev.type = \"emerge\"   ) sockeye_hatch_mod ; sockeye_emerge_mod #> # A tibble: 1 × 5 #>   author                  species model dev.type func                           #>   <chr>                   <chr>   <chr> <chr>    <chr>                          #> 1 Beacham and Murray 1990 sockeye 2     hatch    1 /exp(6.727 - log(x + 2.394)) #> # A tibble: 1 × 5 #>   author                  species model dev.type func                           #>   <chr>                   <chr>   <chr> <chr>    <chr>                          #> 1 Beacham and Murray 1990 sockeye 2     emerge   1 / exp(7.227 - log(x + 2.56))"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"predict-phenology","dir":"Articles","previous_headings":"","what":"Predict phenology","title":"Predict fish phenology: basic","text":"can now use model expressions predict sockeye hatch emerge Woody Island 1990. First predict hatch timing using predict_phenology(): look inside returned object (see Understanding results additional context) see days hatch development period: can also emergence:","code":"WI_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod   ) WI_hatch$days2done #> [1] 74 WI_hatch$dev.period #>        start       stop #> 1 1990-08-18 1990-10-30 WI_emerge <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_emerge_mod   # notice we're using emerge model expression here   )  # see days to hatch and development period WI_emerge$days2done #> [1] 204 WI_emerge$dev.period #>        start       stop #> 1 1990-08-18 1991-03-09"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"results","dir":"Articles","previous_headings":"","what":"Understanding your results","title":"Predict fish phenology: basic","text":"output predict_phenology() includes lot information. look WI_hatch object see multiple elements stored list can accessed using $ operator. WI_hatch$days2done outputs predicted days hatch emerge. WI_hatch$dev.period 1x2 dataframe dates corresponding fish’s parent spawned (input predict_phenology(spawn.date = ...)) date fish predicted hatch emerge. WI_hatch$ef.vals vector day’s effective value evaluated using whatever model chosen. WI_hatch$ef.tibble n x 4 tibble (n = number days hatch emerge) columns date, day’s temperature effective value, cumulative sum effective values. ef.tibble object meant serve basis users make custom figures data beyond functionality discuss .","code":"str(WI_hatch) #> List of 5 #>  $ days2done  : int 74 #>  $ dev.period :'data.frame': 1 obs. of  2 variables: #>   ..$ start: Date[1:1], format: \"1990-08-18\" #>   ..$ stop : Date[1:1], format: \"1990-10-30\" #>  $ ef.vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>  $ ef.tibble  : spc_tbl_ [74 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   ..$ dates      : Date[1:74], format: \"1990-08-18\" \"1990-08-19\" ... #>   ..$ temperature: num [1:74] 9.84 10.55 10.68 11.45 11.69 ... #>   ..$ ef_vals    : num [1:74] 0.0147 0.0155 0.0157 0.0166 0.0169 ... #>   ..$ ef_cumsum  : num [1:74] 0.0147 0.0302 0.0458 0.0624 0.0793 ... #>   ..- attr(*, \"spec\")=List of 3 #>   .. ..$ cols   :List of 2 #>   .. .. ..$ date  : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ temp_c: list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ default: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   .. ..$ delim  : chr \",\" #>   .. ..- attr(*, \"class\")= chr \"col_spec\" #>   ..- attr(*, \"problems\")=<externalptr>  #>  $ model.specs: spc_tbl_ [1 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>   ..$ author  : chr \"Beacham and Murray 1990\" #>   ..$ species : chr \"sockeye\" #>   ..$ model   : chr \"2\" #>   ..$ dev.type: chr \"hatch\" #>   ..$ func    : chr \"1 /exp(6.727 - log(x + 2.394))\" #>   ..- attr(*, \"spec\")=List of 3 #>   .. ..$ cols   :List of 5 #>   .. .. ..$ author  : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ species : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ model   : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ dev.type: list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. .. ..$ func    : list() #>   .. .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ default: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   .. ..$ delim  : chr \",\" #>   .. ..- attr(*, \"class\")= chr \"col_spec\" #>   ..- attr(*, \"problems\")=<externalptr>"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"plotting-phenology","dir":"Articles","previous_headings":"","what":"Plotting phenology","title":"Predict fish phenology: basic","text":"hatchR built function, plot_phenology(), allows users visualize phenology results. plot visualizes three specific components: temperature regime predicting cumulative sum effective values effective value day prediction span function allows output various figures based interests, defaults figure information lots labeling. output plot_phenology() cumulative effective values scaled warmest temperature ef.tibble daily effective values scaled multiplying 100 everything visibly congruent figure. Let’s look basic call, gives information:  can turn labeling plot specific values using function arguments style labels, example (plots rendered):","code":"plot_phenology(WI_hatch) plot_phenology(WI_hatch,                 style = \"ef_cumsum\") # shows a plot with just the ef cumulative sum values plot_phenology(WI_hatch,                 style = \"ef_daily\") # shows a plot with just the ef daily values plot_phenology(WI_hatch,                 labels = FALSE) # turns off the labeling for a cleaner figure"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"a-note-about-negative-temperatures","dir":"Articles","previous_headings":"","what":"A note about negative temperatures","title":"Predict fish phenology: basic","text":"Occasionally, temperature data sets negative values values close 0. Negative numbers certain threshold output “number” (NaN) effective values undefined model expression. Similarly, even negative values threshold produce small effective values. values small, allow model accumulate even though development 0 biologically unlikely. assume data set checked values doesn’t include long periods freezing, however model allows occasional dip freezing effect negligible toward development incubation. toy example phenomenon shown .","code":"# vector of temps from -5 to 15 by 0.5 x <- seq(from = -5, to = 15, by = 0.5) x #>  [1] -5.0 -4.5 -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0 #> [16]  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 #> [31] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 15.0  # get effective values for those temperatures # You can see the NaN warning that shows up in our past applications demo_ef_vals <- eval(parse(text = sockeye_hatch_mod$func)) demo_ef_vals #>  [1]         NaN         NaN         NaN         NaN         NaN         NaN #>  [7] 0.000472060 0.001071121 0.001670182 0.002269243 0.002868304 0.003467365 #> [13] 0.004066426 0.004665487 0.005264548 0.005863609 0.006462670 0.007061731 #> [19] 0.007660792 0.008259853 0.008858914 0.009457975 0.010057036 0.010656097 #> [25] 0.011255157 0.011854218 0.012453279 0.013052340 0.013651401 0.014250462 #> [31] 0.014849523 0.015448584 0.016047645 0.016646706 0.017245767 0.017844828 #> [37] 0.018443889 0.019042950 0.019642011 0.020241072 0.020840133  # bring together as a tibble demo <- tibble(x, demo_ef_vals) demo #> # A tibble: 41 × 2 #>        x demo_ef_vals #>    <dbl>        <dbl> #>  1  -5     NaN        #>  2  -4.5   NaN        #>  3  -4     NaN        #>  4  -3.5   NaN        #>  5  -3     NaN        #>  6  -2.5   NaN        #>  7  -2       0.000472 #>  8  -1.5     0.00107  #>  9  -1       0.00167  #> 10  -0.5     0.00227  #> # ℹ 31 more rows  # plot (note NaNs are removed from figure) # rectangle added to highlight the approximate temperatures of interest demo |>    ggplot(aes(x = x, y = demo_ef_vals)) +   geom_rect(aes(ymin = 0, ymax  = 0.005,                  xmin = -5, xmax = 2),              fill = \"dodgerblue\", alpha = 0.25) +   geom_point() +   geom_line() +   labs(x = \"Temperature (C)\", y = \"Effective Value\") +   theme_classic()"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_basic.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Predict fish phenology: basic","text":":::::::","code":""},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predict fish phenology: nested","text":"goal vignette provide examples might access results predict_phenology() might plot data.","code":"library(hatchR) library(purrr) library(tidyr) library(dplyr) library(ggplot2) library(lubridate) library(stringr) library(ggridges) library(patchwork)  isaak_dat <- read_csv(\"~/Library/CloudStorage/Box-Box/Morgan.Sparks/Projects/hatchR/data/Isaak_et_al_2018_long.csv\") isaak_dat <- isaak_dat |>    na.omit()"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Predict fish phenology: nested","text":"hatchR designed flexible achieve many applications. However, virtue built scripting application, hatchR able tackle large datasets relatively quickly efficiently. demonstrate example nested dataset multiple sites include multiple years data.","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"initial-checks","dir":"Articles","previous_headings":"Data","what":"Initial Checks","title":"Predict fish phenology: nested","text":"data downloaded (modified long format) Isaak et al. (2018) generally cover Boise, Payette, Clearwater, upper Salmon River watersheds. get started lets take quick look data. can see 226 sites 826,000 individual records water temperature. application, ’ll thinking sites putative bull trout spawning habitat. know Isaak et al. (2015) generally stop observing bull trout mean August temperatures 13 °C. , ’ll first filter sites cooler 13 °C. Next ’ll want data checks make sure everything looks alright.","code":"# it's quite a large dataset, about 826000 records dim(isaak_dat)  #count number of unique sites isaak_dat |>    pull(site) |> # grab site column   unique() |> #pair down so we only have a single instance of each site name   length() #count the number of records of the unique site name vector # create a vector of site names with temps at or below 13 C bull_trout_sites <- isaak_dat |>    mutate(month = month(SampleDate)) |> #make a month column (numeric)   filter(month == 8) |> # filter out Aug.   group_by(site) |> # apply grouping by site   summarise(mean_aug_temp = mean(temperature)) |>    filter(mean_aug_temp <= 13) |> # keep only sites 13 C or cooler   pull(site) |>    unique()  # we now have a list of 139 sites length(bull_trout_sites)  # create a dataset filtered on our bull trout sites isaak_dat_bt <- isaak_dat |>    filter(site %in% bull_trout_sites) # only keep sites in our vector of bull trout sites  #still lots of data! dim(isaak_dat_bt) # lets look at a couple individual sites PIBO_1345 <- isaak_dat_bt |>    filter(site == \"PIBO_1345\")  # looks nice plot_check_temp(data = PIBO_1345,                         dates = SampleDate,                         temperature = temperature)  #looks like there are multiple records per day so we need to summarize those in the larger dataframe (isaak_dat_bt) PIBO_1345 |>    arrange(SampleDate)"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"nested-dataframes","dir":"Articles","previous_headings":"Data","what":"Nested Dataframes","title":"Predict fish phenology: nested","text":"package dplyr allows us use neat functionality called nested data. datatset, can think terms dataframe made bunch smaller dataframes identifier separating data name site column. sub dataframes records site example can separate programatically can use function across without skipping next datafield. utilizes approach applied map() allows us separate function across individual datasets stored larger dataframe. first example want summarize data day, can using following code. First let’s just look nesting actually make object. resulting data structure tibble new data column called data. data column actually list row contains individual tibble (dataframe). Since ’ll operating nests keep nest, however wanted change back original dataframe format ’s easy unnest().","code":"isaak_dat_bt |>    group_by(site) |>  # we group by site   nest() |> # nest our grouped data   head() isaak_summ_bt <- isaak_dat_bt |>    group_by(site) |> # we group by site   nest() |> # use dplyr to nest our data based on our grouping   mutate(summ_obj = map(data, # we'll create a new list column called summ_obj                             summarize_temp,                             temperature = temperature,                             dates = SampleDate)) |> #    select(site, summ_obj)   # look at first six rows of full object isaak_summ_bt |>     head() # look at first six rows  #pluck the first site to see its structure isaak_summ_bt |>    pluck(\"summ_obj\", 1) # pluck first tibble of summ_obj isaak_summ_bt |>    unnest(cols = summ_obj)"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"data-check","dir":"Articles","previous_headings":"Data","what":"Data Check","title":"Predict fish phenology: nested","text":"can last data check make sure continuous data. First ’ll use smaller example show works expand full dataset.","code":"#start on an idividual example  PIBO_1345_summ <- isaak_summ_bt |>    filter(site == \"PIBO_1345\") |>    unnest(cols = \"summ_obj\")   # we create a column that eiter contains NA, TRUE, or FALSE # NA is for first data # TRUE is if the difference between one row and the row preceding it is 1 # FALSE is the difference is not 1 PIBO_1345_summ |>    mutate(diff = c(NA, diff(date)) ==1) |>    filter(diff == FALSE) # since the output is empty there are no FALSE in diff  # we can do the same to our isaak_summ_bt dataset # only difference here is we are mapping with an anonymoys function hence the # ~{..., .x$date...} # ~{} tells us it's an anonymous function while the .x allows to us to call the column from whatever data # is piped in  isaak_summ_bt |>    mutate(diff =  map(summ_obj,~{c(NA, diff(.x$date)==1)})) |>    unnest(cols = c(summ_obj, diff)) |> # unnest for our filter   filter(diff == FALSE) # all continuous!"},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"mapping-across-nested-data","dir":"Articles","previous_headings":"","what":"Mapping Across Nested Data","title":"Predict fish phenology: nested","text":"Now data format want ’re confident doesn’t gaps can start map hatchR functions onto data. First need make vector spawn dates get model set . can map across nested dataframe.","code":"# spawn datest spawn_dates <- map(c(2011:2014), # year vector to map for custom function                                    function(year) #custom paste function                                     c(paste0(year, \"-09-01\"),                                        paste0(year,\"-09-15\"),                                        paste0(year, \"-09-30\"))) |> #pipe to unlist() to make a vector    unlist()  # bull trout hatch model bt_hatch <- model_select(dev.type = \"hatch\",                          author = \"Austin et al. 2017\",                           species = \"bull trout\",                           model = \"MM\") # see description of the multiple mapping and pipes below hatch_res <- isaak_summ_bt |>    mutate(dev_period = map2(summ_obj, spawn_dates,                            predict_phenology,                           temperature = daily_temp,                           model = bt_hatch,                           dates = date                           ) |>             map_df(\"dev.period\") |> list()) |>    select(site, dev_period) |> # just select the columns we want   unnest(cols = c(dev_period)) |> # unnest everything   mutate(days_to_hatch = stop - start) # make a new column of days to hatch  head(hatch_res)"},{"path":[]},{"path":"https://bmait101.github.io/hatchR/articles/Predict_phenology_nested.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Predict fish phenology: nested","text":":::::::","code":""},{"path":"https://bmait101.github.io/hatchR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bryan Maitland. Author, maintainer. Morgan Sparks. Author.","code":""},{"path":"https://bmait101.github.io/hatchR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maitland B, Sparks M (2024). “hatchR: predicting fish developmental phenology.” preparation.","code":"@Unpublished{,   title = {{hatchR}: predicting fish developmental phenology},   author = {Bryan M. Maitland and Morgan R. Sparks},   year = {2024},   note = {In preparation}, }"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"hatchr-","dir":"","previous_headings":"","what":"Predict Fish Hatching and Emergence from Daily Temperature Data","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"DEVELOPMENT hatchR R package predicting fish developmental phenology using statistical models. intended bridge analytic gap taking statistical models developed hatchery settings (e.g., Beacham Murray 1990) applying real world temperature data sets using effective value framework developed Sparks et al. (2019).","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"use hatchR formal publication report, please cite . Citing hatchR lets us devote resources future. View hatchR citation running","code":"citation(package = \"hatchR\")"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"can install development version hatchR GitHub :","code":"# install.packages(\"pak\") pak::pak(\"bmait101/hatchR\")"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"contributing-to-hatchr","dir":"","previous_headings":"","what":"Contributing to hatchR","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"encourage users report bugs /contribute hatchR. detail , please see contributing guide (CONTRIBUTING.md).","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"several ways get help hatchR: Open GitHub issue link . Email hatchR support team (Morgan Sparks, Bryan Maitland) Post support website like Stack Overflow Cross Validated.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"provide brief example showing use hatchR. thorough introduction software, see introductory vignette linked . list functions available hatchR, see function reference linked . First load hatchR helper packages running example woody_island dataset included hatchR contains temperature data Woody Island, Lake Iliamna, Alaska. includes daily water temperature data 1990-1992. can use plot_check_temp() visually check data:  Spawning system typically peaks around August 18 hatching emergence done start following spawning season, can predict phenology within subset year.  Next, select hatch emerge models want use predict phenology: Now can predict phenology sockeye salmon using predict_phenology() function: can check predicted phenology running: Finally, can visualize predicted phenology using plot_phenology():","code":"library(hatchR) library(ggplot2)  # for additional plotting options library(lubridate)  # for working with dates p <- plot_check_temp(   data = woody_island,   dates = date,    temperature = temp_c   ) p p +    geom_rect(     aes(       xmin = ymd(\"1990-08-18\"),  # spawn date       xmax = ymd(\"1991-04-01\"),  # approx phenology window end       ymin = -10,  # lower bound       ymax = 25),  # upper bound     fill = \"darkgreen\",  # color rectangle dark green     alpha = 0.01  # make rectangle semi-transparent     ) sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",    species = \"sockeye\",    model = 2,    dev.type = \"hatch\"   ) WI_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod   ) # see days to hatch WI_hatch$days2done #> [1] 74 # and development period WI_hatch$dev.period #>        start       stop #> 1 1990-08-18 1990-10-30 plot_phenology(WI_hatch)"},{"path":"https://bmait101.github.io/hatchR/index.html","id":"imported-packages","dir":"","previous_headings":"","what":"Imported Packages","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"hacthR imports following R packages: dplyr: data manipulation. ggplot2: vignette visualizations. lubridate: working dates. tibble: creating tibbles output various functions. rlang: .data usage. stats: various modeling functions (e.g., confint()). utils: various utility functions.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"suggested-packages","dir":"","previous_headings":"","what":"Suggested Packages","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"hatchR suggests following R packages: knitr: vignette building. readr: reading data. rmarkdown: vignette building. testthat: unit testing.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"project licensed GNU General Public License, GPL-3.","code":""},{"path":"https://bmait101.github.io/hatchR/index.html","id":"usda-disclaimer","dir":"","previous_headings":"","what":"USDA Disclaimer","title":"Predict Fish Hatching and Emergence from Daily Temperature Data","text":"hatchR project code provided “” basis user assumes responsibility use. USDA Forest Service relinquished control information longer responsibility protect integrity , confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring USDA Forest Service.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the dates in a data frame are continuous. — check_continuous","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"Check dates data frame continuous.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"","code":"check_continuous(data, dates)"},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"data data.frame, data frame extension (e.g. tibble). dates Column representing date temperature measurements.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"message indicating dates continuous breaks. breaks, vector row numbers breaks occur returned.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/check_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the dates in a data frame are continuous. — check_continuous","text":"","code":"library(hatchR) check_continuous(crooked_river, date) #> ℹ No breaks were found. All clear!"},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily stream temperatures data — crooked_river","title":"Daily stream temperatures data — crooked_river","text":"Daily stream temperature data US Forest Service Rocky Mountain Research Station, Water Watersheds Program.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily stream temperatures data — crooked_river","text":"","code":"crooked_river"},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily stream temperatures data — crooked_river","text":"Data frame columns SampleDate Date measurement taken. site Site ID. temperture Temperature degrees Celsius.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily stream temperatures data — crooked_river","text":"Dan Isaak, US Forest Service Rocky Mountain Research Station","code":""},{"path":"https://bmait101.github.io/hatchR/reference/crooked_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily stream temperatures data — crooked_river","text":"","code":"crooked_river #> # A tibble: 1,826 × 2 #>    date                temp_c #>    <dttm>               <dbl> #>  1 2010-12-01 00:00:00   1.16 #>  2 2010-12-02 00:00:00   1.34 #>  3 2010-12-03 00:00:00   1.25 #>  4 2010-12-04 00:00:00   1.01 #>  5 2010-12-05 00:00:00   1.29 #>  6 2010-12-06 00:00:00   1.23 #>  7 2010-12-07 00:00:00   1.46 #>  8 2010-12-08 00:00:00   1.50 #>  9 2010-12-09 00:00:00   1.74 #> 10 2010-12-10 00:00:00   1.46 #> # ℹ 1,816 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit B&M model 2 to new data using stats::nls() — fit_model","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"Generate custom parameterized models predicting hatching emergence phenology.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"","code":"fit_model(df, temp, days, species = NULL, dev.type = NULL)"},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"df Data.frame new data temp Column temperature measurement days Column day temperature measurement species Character string species name (e.g., \"sockeye\") dev.type Character string development type: \"hatch\" \"emerge\"","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"List fit model object, model coefficients, model specifications data.frame, plot observations model fit.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"hatchR also includes functionality generate custom parameterized models predicting hatching emergence phenology. Importantly, custom parameterization relies model format developed model 2 Beacham Murray (1990), chose overall simplicity negligible loss accuracy. See Beacham Murray (1990) Sparks et al. (2019) specific discussion regarding model 2 development effective value approach.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit B&M model 2 to new data using stats::nls() — fit_model","text":"","code":"library(hatchR) # vector of temperatures temperature <- c(2, 5, 8, 11, 14) # vector of days to hatch days_to_hatch <- c(194, 87, 54, 35, 28) quinn_bt_hatch <- tibble::tibble(temperature, days_to_hatch) bt_hatch_mod <- fit_model(df = quinn_bt_hatch, temp = temperature, days = days_to_hatch, species = \"sockeye\", dev.type = \"hatch\") #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf"},{"path":"https://bmait101.github.io/hatchR/reference/hatchR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hatchR: Predict Fish Hatching and Emergence from Daily Temperature Data — hatchR-package","title":"hatchR: Predict Fish Hatching and Emergence from Daily Temperature Data — hatchR-package","text":"hatchR intended bridge analytic gap taking statistical models developed hatchery settings (e.g., Beacham Murray 1990) applying real world temperature data sets using effective value framework developed Sparks et al. (2019).","code":""},{"path":[]},{"path":"https://bmait101.github.io/hatchR/reference/hatchR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hatchR: Predict Fish Hatching and Emergence from Daily Temperature Data — hatchR-package","text":"Maintainer: Bryan Maitland bryan.maitland@usda.gov (ORCID) Authors: Morgan Sparks morgan.sparks@usda.gov","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a development model structure — model_select","title":"Select a development model structure — model_select","text":"function calls model table parameterizations different species different studies built . Refer table (model_table) using function find inputs different function arguments. pulls model format string parses usable hatchR model.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a development model structure — model_select","text":"","code":"model_select(author, species, model, dev.type = \"hatch\")"},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a development model structure — model_select","text":"author Character string author name. species Character string species name. model Model number Beacham Murray (1990). dev.type phenology type. vector possible values \"hatch\" \"emerge\". default \"hatch\".","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a development model structure — model_select","text":"data.frame giving model specifications passed predict_phenology().","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a development model structure — model_select","text":"","code":"library(hatchR) # access the parameterization for sockeye hatching using # model #2 from Beacham and Murray (1990) sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   dev.type = \"hatch\" ) # print sockeye_hatch_mod #> # A tibble: 1 × 5 #>   author                  species model dev.type func                           #>   <chr>                   <chr>   <chr> <chr>    <chr>                          #> 1 Beacham and Murray 1990 sockeye 2     hatch    1 /exp(6.727 - log(x + 2.394))"},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of phenology models — model_table","title":"Table of phenology models — model_table","text":"Description come...","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of phenology models — model_table","text":"","code":"model_table"},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of phenology models — model_table","text":"Data frame author Short article citation species Species name model Model number B&M dev.type Hatch emergence func character string desciption function","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of phenology models — model_table","text":"come...","code":""},{"path":"https://bmait101.github.io/hatchR/reference/model_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of phenology models — model_table","text":"","code":"model_table #> # A tibble: 51 × 5 #>    author                  species  model dev.type func                          #>    <chr>                   <chr>    <chr> <chr>    <chr>                         #>  1 Beacham and Murray 1990 sockeye  2     hatch    1 /exp(6.727 - log(x + 2.394… #>  2 Beacham and Murray 1990 sockeye  4     hatch    1/exp(8.734 + (-1.589*log(x … #>  3 Beacham and Murray 1990 sockeye  5     hatch    1/exp(9.848 + (-1.583*log(x … #>  4 Beacham and Murray 1990 sockeye  7     hatch    1/exp(5.379 + (-0.076*log(x)… #>  5 Beacham and Murray 1990 sockeye  2     emerge   1 / exp(7.227 - log(x + 2.56… #>  6 Beacham and Murray 1990 sockeye  4     emerge   1/exp(7.647 + (-1.134*log(x … #>  7 Beacham and Murray 1990 sockeye  5     emerge   1/exp(9.404 + (-1.169*log(x … #>  8 Beacham and Murray 1990 sockeye  7     emerge   1/exp(5.97 + (-0.276*log(x))… #>  9 Beacham and Murray 1990 pink odd 2     hatch    1 / exp(6.663 - log(x + 2.55… #> 10 Beacham and Murray 1990 pink odd 4     hatch    1/exp(7.962 + (-1.382*log(x … #> # ℹ 41 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual check of imported temperature data — plot_check_temp","title":"Visual check of imported temperature data — plot_check_temp","text":"plot_check_temp function used plot imported data check temperature values. function takes data frame dates temperature values, plots temperature values time. function also allows users specify minimum maximum temperature values plotted.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual check of imported temperature data — plot_check_temp","text":"","code":"plot_check_temp(data, dates, temperature, temp_min = 0, temp_max = 25)"},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual check of imported temperature data — plot_check_temp","text":"data data.frame, data frame extension (e.g. tibble). dates Vector dates temperature measurements. Must date date-time class. temperature Vector temperature values. temp_min Threshold lower range expected temperature. Default 0. temp_max Threshold upper range expected temperature. Default 25.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual check of imported temperature data — plot_check_temp","text":"object class \"gg\" \"ggplot\" can printed console saved image.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_check_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual check of imported temperature data — plot_check_temp","text":"","code":"library(hatchR) plot_check_temp(   data = crooked_river,   dates = date,   temperature = temp_c )"},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the phenology of fish development — plot_phenology","title":"Visualize the phenology of fish development — plot_phenology","text":"function takes output predict_phenology() creates ggplot2 object.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the phenology of fish development — plot_phenology","text":"","code":"plot_phenology(plot, style = \"all\", labels = TRUE)"},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the phenology of fish development — plot_phenology","text":"plot list containing output predict_phenology() style style plot. vector possible values \"\", \"ef_cumsum\", \"ef_daily\". default \"\". labels Logical. TRUE (default), labels added plot.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the phenology of fish development — plot_phenology","text":"object class \"gg\" \"ggplot\" can printed console saved image.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/plot_phenology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the phenology of fish development — plot_phenology","text":"","code":"library(hatchR) #plot_phenology(WI_hatch, style = \"ef_cumsum\") # shows a plot with just the ef cumulative sum values #plot_phenology(WI_hatch, style = \"ef_daily\") # shows a plot with just the ef daily values #plot_phenology(WI_hatch, labels = FALSE) # turns off the labeling for a cleaner figure"},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict phenology of fish — predict_phenology","title":"Predict phenology of fish — predict_phenology","text":"Predict phenology fish using effective value framework.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict phenology of fish — predict_phenology","text":"","code":"predict_phenology(data, dates, temperature, spawn.date, model)"},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict phenology of fish — predict_phenology","text":"data Dataframe dates temperature. dates Date temperature measurements. temperature Temperature measurements. spawn.date Date spawning, given character string (e.g., \"1990-08-18\") model data.frame giving model specifications. must column providing model expression. Can obtained using model_select() using data obtain model expression (see fit_model).","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict phenology of fish — predict_phenology","text":"list following elements: ef.vals: numeric vector day's effective value. days2done: numeric vector length 1; number predicted days hatch emerge. ef.tibble: n x 4 tibble (n = number days hatch emerge) dates, temperature, effective values, cumulative sum effective values. dev.period: 1x2 dataframe dates corresponding fish's parent spawned (input predict_phenology(spawn.date = ...)) date fish predicted hatch emerge. model.specs: data.frame model specifications.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict phenology of fish — predict_phenology","text":"Additional details...","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict phenology of fish — predict_phenology","text":"Sparks, M.M., Falke, J.., Quinn, T.P., Adkinson, M.D., Schindler, D.E. (2017). Influences spawning timing, water temperature, climatic warming early life history phenology western Alaska sockeye salmon. Canadian Journal Fisheries Aquatic Sciences, 76(1), 123–135","code":""},{"path":"https://bmait101.github.io/hatchR/reference/predict_phenology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict phenology of fish — predict_phenology","text":"","code":"library(hatchR) # get model parameterization sockeye_hatch_mod <- model_select(   author = \"Beacham and Murray 1990\",   species = \"sockeye\",   model = 2,   dev.type = \"hatch\" )  # predict phenology sockeye_hatch <- predict_phenology(   data = woody_island,   dates = date,   temperature = temp_c,   spawn.date = \"1990-08-18\",   model = sockeye_hatch_mod ) #> Warning: NaNs produced"},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize temperature data to daily values — summarize_temp","title":"Summarize temperature data to daily values — summarize_temp","text":"summarize_temp function used summarize sub-daily temperature measurements obtain mean daily temperature.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize temperature data to daily values — summarize_temp","text":"","code":"summarize_temp(data, dates, temperature)"},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize temperature data to daily values — summarize_temp","text":"data data.frame, data frame extension (e.g. tibble). dates Column representing date temperature measurements. temperature Column representing temperature values.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize temperature data to daily values — summarize_temp","text":"data.frame summarized daily temperature values.","code":""},{"path":"https://bmait101.github.io/hatchR/reference/summarize_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize temperature data to daily values — summarize_temp","text":"","code":"library(hatchR) summarize_temp(   data = crooked_river,   dates = date,   temperature = temp_c ) #> # A tibble: 1,826 × 2 #>    date       daily_temp #>    <date>          <dbl> #>  1 2010-12-01       1.16 #>  2 2010-12-02       1.34 #>  3 2010-12-03       1.25 #>  4 2010-12-04       1.01 #>  5 2010-12-05       1.29 #>  6 2010-12-06       1.23 #>  7 2010-12-07       1.46 #>  8 2010-12-08       1.50 #>  9 2010-12-09       1.74 #> 10 2010-12-10       1.46 #> # ℹ 1,816 more rows"},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature Data from Lake Iliamna, Alaska — woody_island","title":"Temperature Data from Lake Iliamna, Alaska — woody_island","text":"Temperature Data Lake Iliamna Woody Island, Alaska","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature Data from Lake Iliamna, Alaska — woody_island","text":"","code":"woody_island"},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Temperature Data from Lake Iliamna, Alaska — woody_island","text":"Data frame author Short article citation species Species name model Model number B&M dev.type Hatch emergence func character string desciption function","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Temperature Data from Lake Iliamna, Alaska — woody_island","text":"come...","code":""},{"path":"https://bmait101.github.io/hatchR/reference/woody_island.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temperature Data from Lake Iliamna, Alaska — woody_island","text":"","code":"woody_island #> # A tibble: 739 × 2 #>    date       temp_c #>    <date>      <dbl> #>  1 1990-08-11  25.8  #>  2 1990-08-12  23.3  #>  3 1990-08-13  18.5  #>  4 1990-08-14  15.4  #>  5 1990-08-15  14.0  #>  6 1990-08-16  11.4  #>  7 1990-08-17   9.19 #>  8 1990-08-18   9.84 #>  9 1990-08-19  10.6  #> 10 1990-08-20  10.7  #> # ℹ 729 more rows"},{"path":"https://bmait101.github.io/hatchR/news/index.html","id":"hatchr-010","dir":"Changelog","previous_headings":"","what":"hatchR 0.1.0","title":"hatchR 0.1.0","text":"Initial CRAN submission.","code":""}]
